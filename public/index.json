[{"authors":["admin"],"categories":null,"content":"I am Full Professor of Software Engineering at the University of Rennes 1. I am Head of the Computer Science Department at the engineering school ESIR, and researcher within the research team DiverSE, joint to the CNRS Research Institute of Computer Science and Random Systems (IRISA) and Inria. I am also adjunct researcher in the SM@RT team of the CNRS Research Institute in Computer Science of Toulouse (IRIT). More information in my complete bio.\n  \u0026nbsp; --  \u0026nbsp;\u0026nbsp;  \u0026nbsp;\u0026nbsp;  \u0026nbsp;\u0026nbsp;  \u0026nbsp;\u0026nbsp;   ","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://people.irisa.fr/Benoit.Combemale/author/benoit-combemale/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/author/benoit-combemale/","section":"authors","summary":"I am Full Professor of Software Engineering at the University of Rennes 1. I am Head of the Computer Science Department at the engineering school ESIR, and researcher within the research team DiverSE, joint to the CNRS Research Institute of Computer Science and Random Systems (IRISA) and Inria.","tags":null,"title":"Benoit Combemale","type":"authors"},{"authors":null,"categories":null,"content":"Digitalization and Software Industry   A Case for Human Values in Software Engineering. Jon Whittle, Maria Angela Ferrario, Will Simm, Waqar Hussain. In IEEE Softw. 38(1): 106-113 (2021)\n   Is software the result of top-down intelligent design or evolution?. Edward A. Lee. 2018. Commun. ACM 61, 9 (August 2018), 34-36. ( video and book)\n   Crowdsourcing in Software Engineering: Models, Motivations, and Challenges. LaToza, Thomas \u0026amp; van der Hoek, Andre. IEEE Software (2016). 33. 74-80. 10.1109/MS.2016.12.\n   Software Heritage: Why and How to Preserve Software Source Code, by Roberto Di Cosmo, Stefano Zacchiroli. 2017.\n   Why Software Is Eating The World, By Marc Andreessen, In wsj. August 20, 2011.\n Software Engineering in Practices   Software development in disruptive times, by João Varajão. 2021. Commun. ACM 64, 10 (October 2021), 32–35.\n   Surviving Software Dependencies, by Russ Cox, Communications of the ACM, September 2019.\n   Software Engineering at Google, by Fergus Henderson, 2019.\n   Why are many business instilling a DevOps culture into their organization?, by Diaz, J., López-Fernández, D., Perez, J., and González-Prieto, Á., 2020.\n   Why Google Stores Billions of Lines of Code in a Single Repository, by Rachel Potvin, Josh Levenberg. In Communications of the ACM, Vol. 59 No. 7, Pages 78-87, 2016.\n   Development and Deployment at Facebook, by Dror Feitelson, Eitan Frachtenberg, and Kent Beck. In IEEE Internet Computing 17, 4 (July 2013).\n   Deploying Search Based Software Engineering with Sapienz at Facebook, by Nadia Alshahwan, Xinbo Gao, Mark Harman, Yue Jia, Ke Mao, Alexander Mols, Taijin Tei, and Ilya Zorin. In Search-Based Software Engineering 2018, Springer.\n   The antifragile organization, by Ariel Tseitlin. In Commun. ACM 56, 8 (August 2013).\n   How We Use Backstage at Spotify. 2020.\n   How We Build Code at Netflix. M. McGarr, E. Bukoski, and B. Moyles. 2016.\n   Einas Haddad. Service-Oriented Architecture: Scaling the Uber Engineering Codebase As We Grow. 2015.\n   Microservices. J. Thones. In: IEEE Software 32.1 (2015), pp. 116–116. doi: 10.1109/MS.2015.11.\n Software Testing and Resilience Engineering   Long Term Effects of Mutation Testing, by Goran Petrovic Gordon Fraser Marko Ivanković René Just. 2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE), IEEE, pp. 910-921\n   Practical Mutation Testing at Scale: A view from Google, by Goran Petrovic Gordon Fraser Marko Ivanković René Just. IEEE Transactions on Software Engineering (2021)\n   What It Would Take to Use Mutation Testing in Industry\u0026ndash;A Study at Facebook, by Moritz Beller, Chu-Pan Wong, Johannes Bader, Andrew Scott, Mateusz Machalica, Satish Chandra, Erik Meijer. In ICSE 2021 SEIP - Software Engineering in Practice.\n [State of Mutation Testing at Google](https://research.google.com/pubs/pub46584.html), by Goran Petrovic and Marko Ivankovic. In Proceedings of the 40th International Conference on Software Engineering 2018 (SEIP). --   A Large-Scale Study of Test Coverage Evolution, by Michael Hilton, Jonathan Bell and Darko Marinov. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE ’18), ACM.\n   Chaos Engineering, by Ali Basiri, Niosha Behnam, Ruud de Rooij, Lorin Hochstein, Luke Kosewski, Justin Reynolds, Casey Rosenthal. In IEEE Software vol. 33 no. 3, p. 35-41, 2016.\n   Automating chaos experiments in production, Ali Basiri, Lorin Hochstein, Nora Jones, Haley Tucker. In Proceedings of the 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP \u0026lsquo;19). IEEE Press, Piscataway, NJ, USA, 31-40.\n   Understanding flaky tests: the developer’s perspective. Moritz Eck, Fabio Palomba, Marco Castelluccio, and Alberto Bacchelli. 2019. In ESEC/FSE 2019.\n Programming Language   A Large-Scale Study of Programming Languages and Code Quality in GitHub, by Baishakhi Ray, Daryl Posnett, Premkumar Devanbu, Vladimir Filkov. In Communications of the ACM, Vol. 60 No. 10, Pages 91-100, Oct. 2017.\n   A programmable programming language, by Matthias Felleisen, Robert Bruce Findler, Matthew Flatt, Shriram Krishnamurthi, Eli Barzilay, Jay McCarthy, and Sam Tobin-Hochstadt. In Communications of the ACM 61, 3, Pages 62-71, Feb. 2018. DOI: https://doi.org/10.1145/3127323\n Typing   Against a Universal Definition of \u0026lsquo;Type\u0026rsquo;, by Tomas Petricek. In Proceedings of Onward! Essays 2015.\n   In Search of Types, by Stephen Kell. In Proceedings of the 2014 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming \u0026amp; Software (Onward! 2014).\n   To Type or Not to Type: Quantifying Detectable Bugs in JavaScript by Z. Gao, C. Bird and E. T. Barr. In IEEE/ACM 39th International Conference on Software Engineering (ICSE'17), Buenos Aires, 2017, pp. 758-769.\n   On understanding data abstraction, revisited by William R. Cook. In the 24th ACM SIGPLAN conference on Object Oriented Programming Systems Languages and Applications (OOPSLA \u0026lsquo;09), 2009.\n Approximate computing   A survey of techniques for approximate computing, by Mittal, S. ACM Computing Surveys (CSUR), 48(4), 62 (2016).\n [DieHard: probabilistic memory safety for unsafe languages](https://people.cs.umass.edu/~emery/pubs/fp014-berger.pdf), by Emery D. Berger and Benjamin G. Zorn. In Proceedings of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '06). -- Software modularity   Traits: Composable Units of Behavior, by Nathanael Schärli, Stéphane Ducasse, Oscar Nierstrasz and Andrew Black. In European Conference on Object-Oriented Programming (ECOOP 2003).\n   Aspect-oriented programming, by Kiczales G. et al. European Conference on Object-Oriented Programming (ECOOP 1997).\n Software synthesis   Automatic patch generation by learning correct code, by Fan Long and Martin Rinard. In Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL \u0026lsquo;16). ACM, New York, NY, USA, 298-312.\n [An Analysis of Patch Plausibility and Correctness for Generate-And-Validate Patch Generation Systems](http://dspace.mit.edu/bitstream/handle/1721.1/94337/MIT-CSAIL-TR-2015-003.pdf), by Zichao Qi, Fan Long, Sara Achour, and Martin Rinard. In Proceedings of the 2015 International Symposium on Software Testing and Analysis (ISSTA 2015). ACM, New York, NY, USA, 24-36. -- Scientific Method   The ABC of Software Engineering Research. Klaas-Jan Stol and Brian Fitzgerald. 2018. ACM Trans. Softw. Eng. Methodol. 27, 3, Article 11 (October 2018).\n   Repeatability in Computer Systems Research By Christian Collberg, Todd A. Proebsting. Communications of the ACM, March 2016, Vol. 59 No. 3, Pages 62-69.\n ","date":1632009600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632009600,"objectID":"0806f0dfea2441c0bed0e6fede8f66b6","permalink":"https://people.irisa.fr/Benoit.Combemale/course/papers/","publishdate":"2021-09-19T00:00:00Z","relpermalink":"/Benoit.Combemale/course/papers/","section":"course","summary":"Digitalization and Software Industry   A Case for Human Values in Software Engineering. Jon Whittle, Maria Angela Ferrario, Will Simm, Waqar Hussain. In IEEE Softw. 38(1): 106-113 (2021)\n   Is software the result of top-down intelligent design or evolution?","tags":["student"],"title":"Litterature on Software Engienering","type":"course"},{"authors":null,"categories":null,"content":"Context A broad spectrum of application domains are increasingly making use of heterogeneous and large volumes of data with varying degrees of humans in the loop. The recent success of Artificial Intelligence (AI) and, in particular, Machine Learning (ML) further amplifies the relevance of data in the development, maintenance, evolution, and execution management of systems. While system development makes use of both models and data, it differs in the types and uses of models and data, and the degree and role of humans in the loop.\nTo capture these differences, we recently defined the MODA framework [1]. MODA supports the system life-cycle of socio-technical systems, and is intended to handle a broad range of stakeholders and community groups. The framework provides a vision for how to explicitly integrate the three roles played by models – prescriptive, predictive, and descriptive [2,3] – as well as their respective data sources and highlights related actions to integrate them.\nDescription of the work The main objective of this internship is to document and analyze the various practices (methods, processes, appraoches, and frameworks) in software engineering using the newly defined MODA framework. For such a purpose, the candidate will perform a review of the litterature about the modern software development practices, formalize them using the MODA framework, and propose a classification according to a set of criteria to be defined.\nEnvironment The candidate will work at Inria in the DiverSE team. Inria is the French national institute for research in computer science. There are 8 Inria research centres located throughout France, hosting more than 200 research teams. The DiverSE team is located in Rennes. DiverSE’s research is in the area of software engineering. The team is actively involved in European, French and industrial projects and is composed of 9 faculty members, 20 PhD students, 2 post-docs and 4 engineers. The candidate will work in the context of a collaboration with McGill University (Canada). The main supervisor will be Prof. Benoit Combemale (University of Rennes 1, DiverSE team).\nReferences  Benoit Combemale, Jörg Kienzle, Gunter Mussbacher, Hyacinth Ali, Daniel Amyot, et al.. A Hitchhiker\u0026rsquo;s Guide to Model-Driven Engineering for Data-Centric Systems. IEEE Software, Institute of Electrical and Electronics Engineers, 2020, pp.1-9. Cf. https://hal.inria.fr/hal-02612087 T. Kühne, “Unifying explanatory and constructive modeling: towards removing the gulf between ontologies and conceptual models,” in MODELS 2016. ACM, 2016, pp. 95–102. E. A. Lee, “Modeling in engineering and science,” Commun. ACM, vol. 62, no. 1, pp. 35–36, Dec. 2018.  ","date":1627768800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627768800,"objectID":"b8c1a7f386865436c84f4ddb44ca0685","permalink":"https://people.irisa.fr/Benoit.Combemale/job/msc-moda/","publishdate":"2021-08-01T00:00:00+02:00","relpermalink":"/Benoit.Combemale/job/msc-moda/","section":"job","summary":"Context A broad spectrum of application domains are increasingly making use of heterogeneous and large volumes of data with varying degrees of humans in the loop. The recent success of Artificial Intelligence (AI) and, in particular, Machine Learning (ML) further amplifies the relevance of data in the development, maintenance, evolution, and execution management of systems.","tags":null,"title":"Internship: data-centric software engineering.","type":"job"},{"authors":null,"categories":null,"content":"Context and objectives Integrated Development Environments (IDEs) are indispensable companions to programming languages. They are increasingly turning towards Web-based infrastructure. The rise of protocols such as the Language Server Protocol (LSP) that standardize the separation between a language-agnostic IDE, and a language server that provides all language services (e.g., auto completion, compiler\u0026hellip;) has allowed the emergence of high quality generic Web components to build the IDE part that runs in the browser. Protocols allow language servers to be reused accross different IDEs, and web-based interfaces facilitate access to the IDE.\nBeyond these first benefits, web-based IDEs also open up new perspectives in terms of collaborative environments, both for general-purpose languages and domain-specific languages. However, this requires all language services to be well identified and to scale according to their use.\nIn contrast with the current approaches that provide IDEs in the form of a monolithic client-server architecture, we propose to investigate the modularization of the various languages services, and the definition of a specific protocol between them to support their individual deployment, and possible dynamic reconfiguration according to their use.\nDescription of the work After a review of the literature and the state of practices regarding the recently introduced protocols, the student(s) will:\n propose a systematic approach to modularize the various language services, and establish a protocol between them to suport their communication. In particular, the protocol will have to manage the shared ressources, e.g., the programs available in the workspace. a generative approach to automate the deployment or dynamic reconfiguration of the vraious services accross the available execution platform, and according to the defined protocol and current context. a predictive model to capture the environment and the runtime data of the various language services, and recommend the best configuration of the deployment according to the current context.  Environment The candidate will work at Inria in the DiverSE team. Inria is the French national institute for research in computer science. There are 8 Inria research centres located throughout France, hosting more than 200 research teams. The DiverSE team is located in Rennes. DiverSE’s research is in the area of software engineering. The team is actively involved in European, French and industrial projects and is composed of 9 faculty members, 20 PhD students, 2 post-docs and 4 engineers. The candidate will work in the context of one of the main topic explored in the team, involving various professors and students, as well as a close partnership with CWI in Amsterdam. The main supervisors will be Prof. Benoit Combemale and Prof. Olivier Barais (University of Rennes 1, DiverSE team).\n","date":1627768800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627768800,"objectID":"3b6b77e0532f4a030394446e94e9a4ea","permalink":"https://people.irisa.fr/Benoit.Combemale/job/msc-mep/","publishdate":"2021-08-01T00:00:00+02:00","relpermalink":"/Benoit.Combemale/job/msc-mep/","section":"job","summary":"Context and objectives Integrated Development Environments (IDEs) are indispensable companions to programming languages. They are increasingly turning towards Web-based infrastructure. The rise of protocols such as the Language Server Protocol (LSP) that standardize the separation between a language-agnostic IDE, and a language server that provides all language services (e.","tags":null,"title":"Internship: Towards Distributed and Scalable IDE.","type":"job"},{"authors":null,"categories":null,"content":"keywords Programming Language, Software Language Engineering, Domain-Specific Language, Polyglot Development, Integrated Development Environment, Refactoring, Co-evolution, Code Repair.\nContext and Challenges The evolution of software engineering discipline has seen the emergence of a multitude of programming languages (PL), each dedicated to a particular application concern. Nowadays, complex software development often involves more than a single language for the implementation, referred to as polyglot development . Indeed, we observe more and more software projects that are implemented with various PLs, in particular, to combine their strengths and counterbalance their weaknesses. For example, polyglot development is relevant and popular in development of web applications, video games, DSLs, etc. Emerging solutions do exist that support polyglot programming relying on Intermediate Representation (IR), such as the GrallVM/Truffle, PolyNote notebook, LLVM, or WebAssembly.\nWhile polyglot development allows developers to choose the appropriate language to implement a given concern, it also leads to a set of loosely coupled (i.e., with data sharing through variables and functions calls) and heterogeneous programs difficult to globally reason over them. Indeed, the existing frameworks do not reify the relationships between them and poorly support the developers on the global impact (i.e., in other programs) of any code change.\nObjectives The main objectives of this internship are the following:\n state of the art on semantic-preserving refactorings, co-evolution and code repair, experimented on specific languages ; complement the catalog of semantic-preserving refactorings to cover polyglot development scenarios ; Propose a unifying development framework to convey any code change over the overall heterogeneous programs, and analyse the global consistency ; develop a prototype that automates the application of polyglot semantic-preserving refactorings in reaction to code changes to ensure the global consistency of the overall software system.  This internship will be done in the context of international collaboration between DiverSE/IRISA and CWI through the international ALE team, and with our contact in ORACLE (GrallVM/Truffle).\nRequired and appreciated skills  strong skills in programming, more specifically, fluent in object-oriented programming ; passionate about programming languages, language theory, language design \u0026amp; implementation and integrated development environment ; autonomy, and excellent English speaking and writing skills.  Environment The candidate will work in the DiverSE team, common to CNRS (IRISA) and Inria. The DiverSE team is located in Rennes, France. DiverSE’s research is in the field of software engineering. The team is actively involved in European, French and industrial projects and is composed of 9 professors/researchers, 20 PhD students, 4 post-docs and 3 engineers. The main supervisors of the thesis will be Benoit Combemale (benoit.combemale@irisa.fr) and Djamel Khelladi (djamel-eddine.khelladi@irisa.fr).\nReferences  Fabio Niephaus et al.. “Example-Based Live Programming for Everyone: Building Language-agnostic Tools for Live Programming with LSP and GraalVM”, Onward! 2020 McDirmid, Sean. “Usable live programming”, Onwards! 2013 Santolucito, Mark, William T. Hallahan, and Ruzica Piskac. “Live programming by example.” In Extended Abstracts of the CHI 2019 Hidehiko Masuhara, Shusuke Takahashi, Yusuke Izawa, Youyou Cong. “Toward a Multi-Language and Multi-Environment Framework for Live Programming”, LIVE 2020. Würthinger, Thomas, et al. “One VM to rule them all”, Onward! 2013 Niephaus, Fabio, Tim Felgentreff, and Robert Hirschfeld. “GraalSqueak: toward a smalltalk-based tooling platform for polyglot programming” In Proc. of MPLR 2019 Niephaus, Fabio, Tim Felgentreff, and Robert Hirschfeld. “Towards polyglot adapters for the graalvm” In Proc. of Programming 2019.  ","date":1627768800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627768800,"objectID":"76fd2e8b7789552d53f751bce5d05f83","permalink":"https://people.irisa.fr/Benoit.Combemale/job/msc-microservicedsl/","publishdate":"2021-08-01T00:00:00+02:00","relpermalink":"/Benoit.Combemale/job/msc-microservicedsl/","section":"job","summary":"keywords Programming Language, Software Language Engineering, Domain-Specific Language, Polyglot Development, Integrated Development Environment, Refactoring, Co-evolution, Code Repair.\nContext and Challenges The evolution of software engineering discipline has seen the emergence of a multitude of programming languages (PL), each dedicated to a particular application concern.","tags":null,"title":"Internship: Towards Polyglot Code Refactoring","type":"job"},{"authors":null,"categories":null,"content":"Context The design of complex cyber-physical systems (e.g., industry 5.0) involves various heterogeneous stakeholders (e.g., software engineers, computer and system engineers, mechanical engineers, physicists), all bringing their own expertise to the system, and for this using their own tools and methods. The disruptive design of new, complex systems requires a high degree of flexibility in the communication between these many stakeholders, often limited by the siloed structure of the organization itself (cf. Conway\u0026rsquo;s law). To overcome this constraint, modern engineering environments aims to: better manage the necessary exchanges between the different stakeholders; provide a unique place for information sharing; ensure the consistency of the many points of view. Beyond these classical goals, they also aim at handling value streams, which are characterized by partial orders of activities that require either a social (i.e., among the stakeholders) or a technical (i.e., among the artefacts) coordination. Providing a unifying framework for managing these various activities will ​allow breakthrough innovations and the search for global optimum.\nThe first generations of these engineering environments made it possible to understand the specificities of each stakeholders by allowing them to use their own formalisms (aka. domain-specific modeling languages), while maintaining the overall consistency and the ability to think globally about the system being designed through an holistic digital representation. These environments are sometimes also backed by a methodology to guide the process of creating different points of view. However, these methodologies remain independent of the value stream ​​passing between the many stakeholders involved in the process. This limitation affects the ability to establish a collective intelligence where all individuals collaborate globally and in an agile manner. For this, a correctly identified, transparent value stream, equipped with suitable and partially automated tools to facilitate its handling is essential to promote the creativity necessary in the design phase, while enhancing the involvement of everyone.\nTo overcome this limit to collective intelligence when designing complex systems, this thesis aims to improve the usability of development cycles, involving both systems engineers and all those involved in specialty engineering. Usability will be approached through three complementary aspects:\n Efficiency, which aims to achieve a result with less effort, Affordance, in particular perceptible affordance, which is the ability of an object to suggest its uses, Satisfaction, which is the comfort of the user in using the engineering environment and performing tasks.  Objective To improve the usability (in its three facets) of the development of complex systems, we propose to leverage on modern software engineering practices such as DevOps and web-based collaborative platforms (e.g., forges). DevOps aims, among other things, to reduce the distance between the different stakeholders (esp., developpers and IT) and to improve interactions between them thanks to an adapted tool chain. The execution of this tool chain aims to produce an overall result as quickly as possible (software, data, etc.). The search for this overall result brings together the various stakeholders involved, possibly coming from different fields, around a common final objective. In the context of systems engineering, DevOps would take advantage of the established value stream to automate certain activities as much as possible, and ensure continuous improvement on the system being designed. Forges (e.g., Gitlab, GitHub) are web-based collaborative platforms that bring all stakeholders in a virtual common place to realize the value stream in software development.\nWhile such practices had a deep impact in the software engineering community in the last decade, there are many scientific and technical obstacles to apply them more widely to all the stakeholders involved in the design of complex systems:\n How to establish a main chain of DevOps tools for systems engineering seeking global optima through socio-technical coordination of the different stakeholders involved? How on a local chain of DevOps tools can a stakeholder rely to study local optima without affecting the main chain? How, in a DevOps context, can an evolution carried out by a stakeholder on his data propagate to other impacted data managed by other stakeholders? How to notify a stakeholder in case of detection of an impact on his data so that he can benefit easily and quickly from these changes? How a multi-disciplinary pull request can be implemented to support the required socio-technical coordination? How can each stakeholder, with their specific point of view, visualize, validate and analyze local and global optima?  The work will be applied and evaluated in the field of industry 5.0, which not only considers producing goods and services for profit, but also making it sustainable, human-centric and resilient. All these concerns have to be considered by design, and involve various heterogeneous stakeholders and artefacts to be intelligently coordinated.\nEnvironment Le candidat travaillera dans l\u0026rsquo;équipe DiverSE, commune au CNRS (IRISA) et à Inria. L\u0026rsquo;équipe DiverSE est située à Rennes. Les recherches de l\u0026rsquo;équipe DiverSE se situent dans le domaine du génie logiciel. L\u0026rsquo;équipe est activement impliquée dans des projets européens, français et industriels et est composée de 9 enseignants-chercheurs, 20 doctorants, 4 post-docs et 3 ingénieurs. Les tavaux de thèse seront dirigés par Arnaud Blouin (INSA, DiverSE team), Benoit Combemale (University of Rennes 1, DiverSE team) et Djamel Eddine Khelladi (CNRS, DiverSE team). Le candidat s\u0026rsquo;inscrira à l\u0026rsquo;école doctorale en informatique de l\u0026rsquo;Université de Rennes 1.\n","date":1627768800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627768800,"objectID":"1086c5d70fb490977c7d0c5f868489ad","permalink":"https://people.irisa.fr/Benoit.Combemale/job/phd-devops4industry5.0/","publishdate":"2021-08-01T00:00:00+02:00","relpermalink":"/Benoit.Combemale/job/phd-devops4industry5.0/","section":"job","summary":"Context The design of complex cyber-physical systems (e.g., industry 5.0) involves various heterogeneous stakeholders (e.g., software engineers, computer and system engineers, mechanical engineers, physicists), all bringing their own expertise to the system, and for this using their own tools and methods.","tags":null,"title":"PhD Thesis: DevOps for Industry 5.0.","type":"job"},{"authors":null,"categories":null,"content":"Context La conception de systèmes complexes requiert la participation de nombreux acteurs apportant chacun leur propre expertise sur le système, et utilisant pour cela leur propre outils et méthodes. La conception en rupture de nouveaux systèmes complexes requiert une forte flexibilité dans la communication entre ces nombreux acteurs, souvent limitée par la structure en silos de l\u0026rsquo;organisation elle-même. Pour s\u0026rsquo;affranchir de cette contrainte, la mise en place d\u0026rsquo;environnements d\u0026rsquo;ingénierie vise à : mieux gérer les échanges nécessaires entre les différents acteurs ; offrir un lieu unique pour le partage de l\u0026rsquo;information ; assurer la cohérence des nombreux points de vues ; permettre un flux de valeurs permettant une innovation en rupture et la recherche d\u0026rsquo;optimum globaux.\nLes premières générations de ces environnements d\u0026rsquo;ingénierie ont permis d\u0026rsquo;appréhender les spécificités de chaque acteurs en leur permettant d\u0026rsquo;utiliser leurs propres formalismes, tout en gardant une cohérence globale et la capacité de raisonner globalement sur le système en cours de conception. Ces environnements sont parfois également adossés à une méthodologie permettant de guider le processus de création des différents points de vue. Néanmoins, ces méthodologies restent indépendantes du flux de valeurs transitant entre les nombreux acteurs intervenant dans le processus. Cette limitation affecte la capacité à établir une intelligence collective où l’ensemble des individus collaborent globalement et de manière agile. Pour cela, un flux de valeurs correctement identifié, transparent, doté d\u0026rsquo;un outillage adapté et partiellement automatisé pour faciliter sa manipulation est indispensable pour favoriser la créativité nécessaire en phase de conception, tout en valorisant l\u0026rsquo;implication de chacun.\nObjective Pour pallier cette limite à l\u0026rsquo;intelligence collective lors de la conception de systèmes complexes, cette thèse vise à améliorer l\u0026rsquo;utilisabilité des cycles de développement, impliquant tant les ingénieurs systèmes que l\u0026rsquo;ensemble des acteurs des ingénieries de spécialité. L\u0026rsquo;utilisabilité sera abordée au travers de trois aspects complémentaires :\n L\u0026rsquo;efficience, qui vise à atteindre un résultat à un moindre effort. L\u0026rsquo;affordance, en particulier l\u0026rsquo;affordance perceptible, qui est la capacité d\u0026rsquo;un objet a suggérer ses utilisations. La satisfaction, qui relève du confort de l\u0026rsquo;utilisateur à utiliser l’environnement d\u0026rsquo;ingénierie et à accomplir des tâches.  Pour améliorer l\u0026rsquo;utilisabilité (sous ses trois facettes) du développement de systèmes complexes, nous proposons d\u0026rsquo;explorer l\u0026rsquo;application de techniques d\u0026rsquo;ingénierie logiciel, et en particulier les pratiques DevOps. Le DevOps vise, entre autres, à réduire la distance entre les differents acteurs et à améliorer les interactions entre ces derniers grâce à une chaîne d\u0026rsquo;outils adaptée. L\u0026rsquo;exécution de cette chaîne d\u0026rsquo;outils vise à produire dans les délais les plus courts possible un résultat global (logiciel, données, etc.). La recherche de ce résultat global fédère les différents acteurs impliqués, venant possiblement de différents domaines, autour d\u0026rsquo;un objectif final commun. Dans le contexte de l’ingénierie des systèmes, le DevOps permettrait de tirer parti du flux de valeurs établi pour automatiser au maximum certaines activités, et assurer une amélioration continue sur le système en cours de conception. Les verrous scientifiques et techniques sont nombreux :\n Comment établir une chaîne principale d\u0026rsquo;outils DevOps pour l\u0026rsquo;ingénierie système recherchant des optimum globaux en permettant une coordination socio-technique entre les différents acteurs impliqués ? Comment sur une chaîne locale d\u0026rsquo;outils DevOps un acteur peut-il s\u0026rsquo;appuyer pour étudier des optimum locaux sans affecter la chaîne principale ? Comment dans un contexte DevOps propager une évolution réalisée par un acteur sur ses données, aux autres données impactées gérées par d\u0026rsquo;autres acteurs ? Comment notifier un acteur en cas de detection d\u0026rsquo;un impact sur ses données pour qu\u0026rsquo;il puisse tirer profit facilement et rapidement de ces changements ? Comment chaque acteur, avec leur point de vue spécifique, peut-il visualiser, valider et analyser des optimum locaux et globaux ?  Description of the work Le doctorant ou la doctorante aura la charge de travailler sur les verrous mentionés ci-dessus. En particulier, si le DevOps est largement utilisé pour le développement de logiciels, les chaînes d\u0026rsquo;outils pour le logiciel ne sont pas adaptées à l\u0026rsquo;ingénierie système en raison de paradigmes différents (par exemple, code vs modèles hétérogènes, exécution vs simulation, informaticiens vs physiciens, \u0026hellip;). Il ou elle devra adapter chacune des étapes de la boucle DevOps (en particulier les étapes : créer, vérifier et surveiller) pour l\u0026rsquo;ingénierie système. Les étapes \u0026lsquo;créer\u0026rsquo; et \u0026lsquo;vérifier\u0026rsquo; impliquent qu\u0026rsquo;un acteur concerné puisse rapidement oberver les résultats lors de changement dans ses données. Sur ce point, nous pouvons tirer profit des connaissances acquises sur le domaine du \u0026ldquo;live programming\u0026rdquo; pour aller vers du \u0026ldquo;live modelling\u0026rdquo;. Le \u0026ldquo;live programming\u0026rdquo; permet de modifier un programme en cours d\u0026rsquo;exécution en propageant les modifications apportées au code source du programme à son état d\u0026rsquo;exécution. Cela permet de combler le fossé entre l\u0026rsquo;écriture et l\u0026rsquo;exécution d\u0026rsquo;un programme : les effets d\u0026rsquo;un changement sur le système en cours d\u0026rsquo;exécution sont immédiatement visibles et le développeur peut prendre des mesures immédiates. Dans notre contexte, cela permettrait d\u0026rsquo;améliorer l\u0026rsquo;efficience et la satisfaction en réduisant le temps d\u0026rsquo;évaluation de changements apportés par un acteur sur des données (ie obtenir ses nouveaux optimum locaux), ainsi que la propagation et l\u0026rsquo;impact de changements sur les optimun locaux des autres acteurs et sur les optimum globaux du système. Cela implique une amélioration de l\u0026rsquo;interactivité des environnements de développements des acteurs et une identification des résultats \u0026lsquo;live\u0026rsquo; que chaque acteur se doit d\u0026rsquo;attendre. La chaîne d\u0026rsquo;outils DevOps pour l\u0026rsquo;ingénierie système permettrait en arrière plan de \u0026lsquo;créer\u0026rsquo; des optimum locaux et globaux, et de les \u0026lsquo;vérifier\u0026rsquo; pour visualisation ou notifications auprès des différents acteurs concernés. Afin d\u0026rsquo;améliorer l\u0026rsquo;affordance, le doctorant ou la doctorante pourra également travailler sur l\u0026rsquo;assistance et la recommandations de tâches visant à simplifier le travail des différents acteurs. Cette assistance pourra se faire grâce à la surveillance de l\u0026rsquo;étape DevOps (l\u0026rsquo;étape \u0026lsquo;surveiller\u0026rsquo;).\nEnvironment Le candidat travaillera dans l\u0026rsquo;équipe DiverSE, commune au CNRS (IRISA) et à Inria. L\u0026rsquo;équipe DiverSE est située à Rennes. Les recherches de l\u0026rsquo;équipe DiverSE se situent dans le domaine du génie logiciel. L\u0026rsquo;équipe est activement impliquée dans des projets européens, français et industriels et est composée de 9 enseignants-chercheurs, 20 doctorants, 4 post-docs et 3 ingénieurs. Les tavaux de thèse seront dirigés par Arnaud Blouin (INSA, DiverSE team), Benoit Combemale (University of Rennes 1, DiverSE team) et Djamel Eddine Khelladi (CNRS, DiverSE team). Le candidat s\u0026rsquo;inscrira à l\u0026rsquo;école doctorale en informatique de l\u0026rsquo;Université de Rennes 1.\n","date":1627768800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627768800,"objectID":"3e155d9db610bbd7c3ee7ef53d6dd5bf","permalink":"https://people.irisa.fr/Benoit.Combemale/job/phd-devops4syseng/","publishdate":"2021-08-01T00:00:00+02:00","relpermalink":"/Benoit.Combemale/job/phd-devops4syseng/","section":"job","summary":"Context La conception de systèmes complexes requiert la participation de nombreux acteurs apportant chacun leur propre expertise sur le système, et utilisant pour cela leur propre outils et méthodes. La conception en rupture de nouveaux systèmes complexes requiert une forte flexibilité dans la communication entre ces nombreux acteurs, souvent limitée par la structure en silos de l\u0026rsquo;organisation elle-même.","tags":null,"title":"PhD Thesis: DevOps pour l'ingénierie des systèmes complexes.","type":"job"},{"authors":null,"categories":null,"content":"Context To cope with the ever-growing number of programming languages, manufacturers of Integrated Development Environments (IDE) have recently defined protocols as a way to use and share multiple language services (e.g., auto-completion, type checker, language runtime) in language-agnostic environments (i.e., the user interface provided by the IDE): the most notable are the Language Server Protocol (LSP) for textual editors, and the Debug Adapter Protocol (DAP) for debugging facilities.\nThese protocols rely on a proper specification of the services that are commonly found in the tool support of general-purpose languages, and define a fixed set of capabilities to offer in the IDE. However, new languages appear regularly offering unique constructs (e.g., Domain-Specific Languages), and supported by dedicated services to be offered as new capabilities in IDEs. This trend leads to the multiplication of new protocols, hard to combine and possibly incompatible (e.g., overlap, different technological stacks).\nBeyond the proposition of specific protocols, the goal of this PhD is to propose an original appraoch for being able to specify language protocols and to offer IDEs to be configured with such protocol specifications.\nObjective This PhD focuses on the definition of the platform architecture to support multimodal and collaborative modeling and simulation. This will be achieved through an extensible, reconfigurable, scalable, and collaborative microservice architecture [1]. Each platform service (e.g., editing facilities, consistency checker, simulator, etc.) will be dynamically deployed as microservices [2], optimally distributed according to the available infrastructure (developer workstation, servers and cloud and the network linking them), the required Quality of Service (latency, resource consumption, etc.), and the expected scenario of use (activity, stakeholder, online/offline).\nThis PhD will establish the envisioned service architecture. We will explore an architecture based on microservices, such that each platform service can be dynamically deployed, duplicated, updated and reconfigured. Hence, the service architecture will support the optimal and scalable deployment of the platform services according to the available infrastructure, the QoS contracts, and the expected scenario of use. One of the specificity of this work lies in the high heterogeneity of the available infrastructure, both in terms of platform services, computing and storage ressources, and network capacity. The other specificity is related to the Quality of Service contract which will includes mutliple dimension of software metrics such as performance, energy consumption, latency, reliability, precision of simulation and security.\nState of the art tools for deploying micro-services architectures (e.g., [3]) are limited in their ability to handle quality of service contract with multiple dimensions and are not well suited when facing a very heterogeneous infrastructure. Therefore, they are not adequate for deploying and supporting the execution of a multimodal and collaborative modeling and simulation platform.\nIDEs went from directly supporting languages to protocols, and we envision in this PhD work the next step: IDE as code [4], where language protocols are created or inferred on demand and serve as support of an adaptation loop taking in charge of the (re)configuration of the IDE.\nDescription of the work To establish the envision service architecture this PhD will have to overcome the following challenges :\n Proposition of new langages to describe (i) the micro services and their interactions, (ii) the available infrastructure, (iii) the expected Quality of Services and (iv) the usage scenario. A smart runtime environment which will deploy, optimize and maintain the collaborative modeling and simulation platform according to the previous descriptions.  The PhD work will be apply to CosApp, a systems engineering and simulation platform involving various general-purpose and domain-specific languages, all suported by specific services.\nEnvironment The candidate will be involved in the DiverSE team, joint to the CNRS (IRISA) and Inria. The DiverSE team is located in Rennes. DiverSE’s research is in the area of software engineering. The team is actively involved in European, French and industrial projects and is composed of 9 faculty members, 20 PhD students, 4 post-docs and 3 engineers. The main advisors of the PhD thesis will be Prof. Benoit Combemale (University of Rennes 1, DiverSE team), Prof. Olivier Barais (University of Rennes 1, DiverSE team), and Prof. Johann Bourcier (University of Rennes 1, DiverSE team). The candidate will register to the doctoral school in computer science of the University of Rennes 1.\nHow to apply Please send your application (PDF) as soon as possible. Screening of applications starts immediately and continues until the position is filled. Send a cover letter including names of at least two referees, CV, PDFs of publications (if any) to the main advisors.\nReferences  Fabien Coulon, Alex Auvolat, Benoit Combemale, Yérom-David Bromberg, François Taïani, Olivier Barais, and Noël Plouzeau. 2020. Modular and distributed IDE. In Proceedings of the 13th ACM SIGPLAN International Conference on Software Language Engineering (SLE 2020). Association for Computing Machinery, New York, NY, USA, 270–282. DOI:https://doi.org/10.1145/3426425.3426947 J. Thones. “Microservices”. In: IEEE Software 32.1 (2015), pp. 116–116. doi: 10.1109/MS.2015.11. https://netflix.github.io/conductor/ Pierre Jeanjean, Benoit Combemale, Olivier Barais. From DSL Specification to Interactive Computer Programming Environment. SLE 2019 - 12th ACM SIGPLAN International Conference on Software Language Engineering, Oct 2019, Athènes, Greece. pp.167-178  ","date":1627768800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627768800,"objectID":"925978eec82a7e547f26b2a5f500ef7a","permalink":"https://people.irisa.fr/Benoit.Combemale/job/phd-idearchitecture/","publishdate":"2021-08-01T00:00:00+02:00","relpermalink":"/Benoit.Combemale/job/phd-idearchitecture/","section":"job","summary":"Context To cope with the ever-growing number of programming languages, manufacturers of Integrated Development Environments (IDE) have recently defined protocols as a way to use and share multiple language services (e.","tags":null,"title":"PhD Thesis: IDE as Code","type":"job"},{"authors":null,"categories":null,"content":"Context \u0026ldquo;Software is eating the world!\u0026rdquo; [1], with massive digitalization of entire business markets (e.g., travel/music/video/photo/book industry…) and the development of cyber-physical systems (CPS) which assist citizens and companies in their daily life and businesses (e.g., smart cities/farming/building, industry 4.0 and transportation systems). But, may the world drive software? Modern CPS require more than ever to integrate a proper understanding of the world in which they involve, in order to both identify the relevant digital innovations the systems may address, and to take informed and open decisions during their dynamic adaptations that act on the physical world. Since the modern CPSs drive our daily life and businesses, they play a political role that requires an understanding of the world far beyond the direct environment captured through the utilization of monitoring techniques and sensors. It also requires to care about the economic, social, and environmental context in which the CPS is involved, in order to take into account all the possible externalities on society raised by the digital innovations and the use of smart CPS. While software engineers are now well equipped for designing safe and deterministic solutions to well-defined problems, they currently face the difficulty to integrate more global concerns considering the underlying wicked problems of the design and use of such systems.\nVarious disciplines use models for different purposes. Engineers, e.g., software engineers, use prescriptive models to represent the system to implement, and scientists, e.g., environmentalists, use descriptive models to represent the complexity of the world to understand and reason over it for analysis purpose. While the former tries to integrate all the properties in between the various engineering involved in the development process, the latter use models to internalize all the possible externalities of any changes, and later perform trade-off analysis. With the advent of smart CPS, the combination of descriptive and prescriptive models becomes essential, respectively for openly and freely involving massive open data, descriptive and predictive models in the decision process (either for trade-off analysis or dynamic adaptation purposes), and prescriptive models to support the smart design and reconfiguration process of modern CPS. It urges to provide the relevant facilities to software engineers for integrating into the future CPS the various models existing from the scientific community, and thus to support informed decisions, a broader engagement of the various stakeholders (e.g., scientists, decision makers and the general public), and dynamic adaptations with regards to the expected political impact of the smart CPS.\nObjective Modeling environments (incl., Integrated Development Environments, seen as special cases for the so-called programming languages) take very different forms depending on the users, the modeling objectives, and the contexts in which the modeling activity fits. During the last decade these environments have evolved to integrate ever more advanced features, and offering the user abstractions and automation (e.g., code generation, V\u0026amp;V and DevOps). Generative approaches currently offer the means to automatically support modeling languages (i.e., Domain-Specific Language) with environments offering facilities for editing, analysis and debugging; all offering support for the implementation of an already well-designed system. However, we are lacking in facilities supporting the system design activity itself (tools to support thinking leading to an optimal design of a desired system). These socio-technical systems can be software, cyber-physical, or physical systems.\nDescription of the work The research program aims to establish the required foundations to integrate not only prescriptive engineering models, but also data (from the systems or existing ones, measurements, user preferences, requirements, data from the surrounding environment, etc.), descriptive models of the environment (physical, but also environmental, economic and social), and predictive models to offer the recommendations and predictions required to assist the modeling activities.\nThe main objectives are:\n the definition of a unified modeling framework making it possible to integrate heterogeneous models, and to establish the relationships between them. the definition of a language engineering approach allowing to design and integrate heterogeneous modeling languages, but also the associated modeling environments:  in connection with distributed computing to offer modular, distributed and collaborative environments in connection with programming languages to offer a sound combination of live programming, literate programming and exploratory programming. in connection with model reduction techniques, approximate computing, and statistical approaches to offer recommendation and prediction tools.    This program is grounded into the application domain of cyber-physical systems in order to offer design space exploration tools to design ground breaking products, and to finely monitor existing systems for predictive maintenance (e.g., digital twin). The program is also grounded in the domain of scientific computing, with the main objective to explore tools that ease the integration of heterogeneous scientific models, and the interaction with them (i.e., tools for tradeoff analysis and decision making through “what if” scenarios).\nThe long term objective is to cross-fertilize the aforementioned application domains, with the overall objective to develop smarter cyber-physical systems in the future. The candidates will leverage ongoing collaborations to investigate sustainability system, i.e., smart cyber-physical systems dedicated to sustain the production, transport and consumption of ressources. These systems include smart cities, farming, building, transportation and grids. The transition to more sustainable production, exploitation and consumption patterns requires technological, scientific and social breakthroughs. This transition must meet human needs while ensuring the preservation of natural resources. This requires communication between several disciplines of the environmental sciences, natural sciences and social sciences in the time scale to measure the degree of irreversibility of our current and future choices, but also in the spatial scale to determine the level of adaptation of the solutions envisaged in a given environment. On the one hand, this requires developing scientific knowledge and methods (eg, green chemistry, renewable energies) as well as socio-economic policies (eg, fiscal and redistribution policy) on our capacity for the sustainable use of our resources, but also in the adaptive capacity of ecosystems. On the other hand, it is necessary to determine the future evolution of needs and their conditions of access in order to prevent various forms of injustice, sources of conflicts and wars.\nEnvironment The candidate will work at Inria in the DiverSE team. Inria is the French national institute for research in computer science. There are 8 Inria research centres located throughout France, hosting more than 200 research teams. The DiverSE team is located in Rennes. DiverSE’s research is in the area of software engineering. The team is actively involved in European, French and industrial projects and is composed of 9 faculty members, 20 PhD students, 2 post-docs and 4 engineers. The main advisor of the PhD thesis will be Prof. Benoit Combemale (University of Rennes 1, DiverSE team).\nHow to apply Please send your application (PDF) as soon as possible. Screening of applications starts immediately and continues until the position is filled. Send a cover letter including names of at least two referees, CV, PDFs of publications (if any) to the main advisor.\nReferences  https://www.wsj.com/articles/SB10001424053111903480904576512250915629460 Benoit Combemale, Jörg Kienzle, Gunter Mussbacher, Hyacinth Ali, Daniel Amyot, et al.. A Hitchhiker\u0026rsquo;s Guide to Model-Driven Engineering for Data-Centric Systems. IEEE Software, Institute of Electrical and Electronics Engineers, 2020, pp.1-9. Preprint: https://hal.inria.fr/hal-02612087 Gunter Mussbacher, Benoit Combemale, Jörg Kienzle, Silvia Abrahão, Hyacinth Ali, et al.. Opportunities in Intelligent Modeling Assistance. Software and Systems Modeling, Springer Verlag, 2020, pp.1-7. Preprint: https://hal.inria.fr/hal-02876536  ","date":1627768800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627768800,"objectID":"541975db58b092ba8708afe161d11776","permalink":"https://people.irisa.fr/Benoit.Combemale/job/phd-smartmodeling/","publishdate":"2021-08-01T00:00:00+02:00","relpermalink":"/Benoit.Combemale/job/phd-smartmodeling/","section":"job","summary":"Context \u0026ldquo;Software is eating the world!\u0026rdquo; [1], with massive digitalization of entire business markets (e.g., travel/music/video/photo/book industry…) and the development of cyber-physical systems (CPS) which assist citizens and companies in their daily life and businesses (e.","tags":null,"title":"PhD Thesis: Smart Modeling","type":"job"},{"authors":null,"categories":null,"content":"Context Scientific software is often designed in the form of a process including data preprocessing, simulation code, and data postprocessing. In the current state of the practices, this process is either split in several modules put together in an explicit data-flow process, or tightly coupled in a single program. The data-flow processes tend to treat in a very decoupled way the processing of the data from the simulation, most often thanks to persistent data exchanges. Although this approach allows a clear separation of concerns, it imposes a strong sequentiality which prevent from reasoning on the simulation code (e.g., linters, optimizers, checkers) according to a given input data. Conversely, strongly coupled approaches allow a very strong link between data processing and simulation, but do not support a clear separation of concerns, and create a big chunk of code preventing the optimal deployment on heterogeneous execution platforms (e.g., GPGPU). This leads to a complex code, without control over the expressiveness required in the different activities. Moreover, none of the current approaches support scientists in the definition and optimization of the compilation chain of the simulation code. In particular, this is very difficult for scientists to predict the performance of a simulation code (execution time, CPU and memory resources) according to a given input data.\nObjective In this work, we will explore a new architecture for designing scientific processes based on explicit behavioral interfaces instead of structural data structure. Such an architecture will simplify the simulation code by avoiding all the conditionals regarding the initialization according to the input data, and will support:\n the inference of the execution paths activated in the simulation code according to a given input data, the scientists in the testing activities based on the identified execution paths, as well as in the definition of the compilation chain partially automatically and partially with the support of linters that will predict quality of service (QoS) properties (e.g., execution time and CPU/memory consumption), and the optimization of the compilation chain with automatic inlining of initialization functions.  The post-doctoral researcher will conduct the following activities:\n Define an explicit behavioral interface between data processing and the simulation code, together with a composition operator to bring them together, Propose a combination of static and dynamic analysis of the simulation code to infer the execution paths according to a given input data, and Explore several services to support testing activities, and help in the definition and optimization of the compilation chain. In particular, a learning model will be established to propose linters that assist the scientists in predicting QoS properties on the simulation code according to a given input data.  The work will be realized in the context of the NabLab language (https://github.com/cea-hpc/NabLab), a domain-specific language (DSL) developed by CEA DAM for numerical analysis with high performance computing (HPC). The post-doctoral researcher will be part of the development team of the DSL, and will have the opportunity to experiment and involve the language accordingly. Scientific results will be published in high-quality conferences and journals from the fields of software engineering and scientific computing.\nEnvironment The work will be supervised by the CEA DAM team in charge of the NabLab project which aims at providing a full-fledged industrial environment for scientific computing and High-Performance Computing. The work will take place at the TERATEC Campus located in the south of the Paris region, in the town of Bruyères-le-Châtel. The campus houses major players in high performance simulation and computing. The work will be also realized in collaboration with the DiverSE research team, joint to the CNRS (IRISA) and Inria. The DiverSE team is located in Rennes, Brittany, France. DiverSE’s research is in the area of software engineering. The team is actively involved in European, French and industrial projects and is composed of 9 faculty members, 20 PhD students, 4 post-docs and 3 engineers. The candidate will work more specifically with Prof. Benoit Combemale (University of Rennes 1, DiverSE team) and Prof. Mathieu Acher (University of Rennes 1, DiverSE team).\nSkills and Background  A PhD in the field of software engineering or language design and implementation, with a recognized research record Experience in software language engineering, in particular an experience with Xtext and EMF would be a plus Experience in the implementation of static and dynamic program analysis Autonomy, and the ability to work in a distributed and international group. Fluent in English  ","date":1627768800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627768800,"objectID":"9f1eb612e1527f84f9c2a34fcf8b344d","permalink":"https://people.irisa.fr/Benoit.Combemale/job/postdoc-simulationprocesses/","publishdate":"2021-08-01T00:00:00+02:00","relpermalink":"/Benoit.Combemale/job/postdoc-simulationprocesses/","section":"job","summary":"Context Scientific software is often designed in the form of a process including data preprocessing, simulation code, and data postprocessing. In the current state of the practices, this process is either split in several modules put together in an explicit data-flow process, or tightly coupled in a single program.","tags":null,"title":"Postdoctoral position: A programming model for simulation processes","type":"job"},{"authors":null,"categories":null,"content":"ICE1-IDM: hack your own language The course introduces the state-of-the-art tools and methods for developping domain-specific languages.\nLectures Professor: Benoit Combemale\n  Model-Driven (software) Engineering: Hack your Own Language!  Domain-Specific Languages  Model Management  Model Execution  Textbooks  \u0026nbsp;\u0026nbsp;\nLabs Professor: Benoit Combemale\nThe labs will consist in realizing by group of 2 the following tutorial. The evaluation will consist in a final demonstration on Thursday, Feb. 4th, 16h-18h.\nOverall objectives of the labs The main objective of this tutorial is to build your own state-machine language (aka. FSM, standing for Finite State Machine), including the design of the domain (i.e. concepts and relationships between them), and the developement of the associated tooling: a textual editor, a compiler (to Java code), and an interpreter.\nWith FSM, we expect to be able to model a state machine according to the textual syntax proposed in the following example, through a modern editor (e.g., syntax highlighting, autocompletion, validation rules and quick fixes, code folding\u0026hellip;):\nfsm door state opened entry \u0026quot;open door\u0026quot; state init closed entry \u0026quot;close door\u0026quot; transition open closed -\u0026gt; opened [on] transition close opened -\u0026gt; closed [off]  A model (e.g., door) conforming to your language (aka., FSM), can then be executed, either through a compilation (i.e. code generation) to a Java-based implementation, or through a direct interpretation (i.e., virtual machine).\nFor the execution, input events (e.g., on and off) that drive the execution can be injected through the console by the user.\n The proposed FSM language to be designed and implemented is a simple automata. Automata are a core paradigm for MANY domain-specific languages used in practice, either for high level design (e.g., functional chains in systems engineering), analysis (e.g., termination, composability, etc.), or development (e.g., agent based simulations, reactive programming, etc.).\n Part 1 - Domain modeling: definition of the Ecore metamodel for your language The main objective of this part is to capture in an Ecore metamodel the concepts and relationships between them of the domain addressed by your language (i.e. the domain of state machine). You are expected to identify the required concepts to model the aforementionned example, and to reify them into language constructs, in the form of a metamodel defined with the metalanguage Ecore and the associated tooling (e.g., graphical editor), aka. Ecore tools.\nWithin your Eclipse RCP that includes EMF, Xtext and Xtend (e.g., the GEMOC Studio), create an Ecore Modeling Project. Give a proper name to your project (e.g., fr.ice.fsm.model) and your package (e.g., fsm).\nFrom this point, you can start model your domain in the form of an object-oriented metamodel consisting of classes and relationships between them.\nYou may validate your metamodel by right click on your ecore model and Validate.\nWhen this is done, you can generate the Java-based implementation of your domain model by opening the associated genmodel file, right click on the root element and Generate all\nYou may assess the expressivity of your metamodel (i.e., check if it well captures your domain, in your case meaning it supports the modeling of the proposed example) by opening the ecore metamodel, right clic on the concept of the root element of your expected model, and choose Create dynamic instance. Then you can create a model in a tree-based editor, and ensure your metamodel supports the expected model structure.\nPart 2 - Textual modeling: definition of the Xtext editor for your language The next step consists into going further than the tree-based editor by developing a modern textual editor. You will use Xtext for this purpose.\nCreate a new Xtext Project From Existing Ecore Models, select the genmodel file associated to your Ecore metamodel, and select the concept of the root element (i.e., the first model element that will be instantiated when you will create a new model).\nTake care of properly filling-in the wizard. Then Xtext provides you a first version of a grammar for the textual syntax of your language.\n You may need to add the Xtext nature to the project where is your Ecore metamodel to make sure the Xtext project can compile (right clic on the project, configure and add Xtext nature).\n You can immediatly start a new eclipse from the current one (Run configuration\u0026hellip; \u0026gt; Eclipse Application), create a new empty project and a blank file with the choosen extension. Eclipse will propose you to open it with the corresponding Xtext editor, and then you can use it according to the syntax proposed by the automatically generated grammar.\nModify your grammar to make sure you can model a state machine according to the syntax proposed in the initial example. You may also have a try to the following example :)\nfsm door state opened entry \u0026quot;open door\u0026quot; state init closed entry \u0026quot;close door\u0026quot; transition open closed -\u0026gt; opened [on] transition close opened -\u0026gt; closed [off] state broken entry \u0026quot;broken door\u0026quot; transition b1 opened -\u0026gt; broken [warning] transition b2 closed -\u0026gt; broken [warning]  Part 3 - Compilation: definition of the Xtend-based compiler for your language Up to now, you identified the concepts of your language (which set its expressivity) and you implemented a textual editor to support the edition of conforming models (aka. programs). The next step is the ability of executing such models. For this purpose, there are two possibilities: by compilation (aka. code generation) to an executable implementation, or by interpretation (aka. virtual machine).\nIn this part of the tutorial, we ask you to complement your metamodel with the implementation of an Xtend-based compiler, following the design pattern visitor. In the case of FSM, such a compiler must generate a Java-based implementation of a given model (i.e., a state machine) according to the design pattern state.\nVotre compilateur peut avoir comme point d\u0026rsquo;entrée la méthode doGenerate de la classe fr.ice.fsm.generator.FsmGenerator pour être appelé à chaque sauvegarde d\u0026rsquo;un modèle édité avec l\u0026rsquo;éditeur textuel développé avec Xtext dans la partie précédente.\nPart 4 (optional) - Interpretation: definition of the Xtend-based interpreter for your language In this part, we ask you to develop a new visitor that will interpret a given conforming model instead of generating an implementation in a third party language (i.e. Java in the case of the compiler developped in the previous part). Similarly to a compiler, an interpreter goes through the asbtract syntax tree of a given model. Instead of generating the corresponding code, it interprets the model element in terms of changes in a model state (aka., context). This is captured in an additional design pattern called interpreter that can be used to complement the design pattern visitor.\nFurther material  The Refcardz on EMF Documentations of Xtext and Xtend  The GEMOC Studio (incl., EMF, Xtext, Xtend, Sirius\u0026hellip;)  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"7ff62a4d7523b213018a032b16c82dfe","permalink":"https://people.irisa.fr/Benoit.Combemale/course/ice1/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/course/ice1/","section":"course","summary":"ICE1-IDM: hack your own language The course introduces the state-of-the-art tools and methods for developping domain-specific languages.\nLectures Professor: Benoit Combemale\n  Model-Driven (software) Engineering: Hack your Own Language!  Domain-Specific Languages  Model Management  Model Execution  Textbooks  \u0026nbsp;\u0026nbsp;","tags":["course"],"title":"Course materials for students of the 1st year of the Master ICE","type":"course"},{"authors":null,"categories":null,"content":"","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"9c628714cc5c8e611b66c528b5e5fbfd","permalink":"https://people.irisa.fr/Benoit.Combemale/project/ipsco/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/ipsco/","section":"project","summary":"2021-2022: Regional collaborative project.","tags":["current"],"title":"Intelligence des process de support et des communautés","type":"project"},{"authors":null,"categories":null,"content":"","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"9196e5f818e4ee167a10fbfb7800ea43","permalink":"https://people.irisa.fr/Benoit.Combemale/project/oneway/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/oneway/","section":"project","summary":"2021-2022: DGAC collaborative project. PI for UR1.","tags":["current"],"title":"OneWay","type":"project"},{"authors":null,"categories":null,"content":"ESIR1-IoT-S6-IDOM The course will introduce the state-of-the-practice tools and methods employed in the software industry to develop modern and complex software-intensive systems.\nLectures Professor: Benoit Combemale\nExcept the introduction during the first lecture, all lectures will rely on pre-recorded videos* that you can watch asynchronously, at the latest during the slots scheduled in your agenda. The last 30 minutes of each lecture slot will be dedicated to office hours (on the Teams\u0026rsquo; group dedicated to the course), where we can discuss on questions you have on the lecture.\n  Tools for (Java) Development Industrialization  Gestion de dépendance et build, et démo Maven.  Gestion de version avec Subversion et Git, et démo Git.  Intégration continue, et démo Jenkins.  Méthodes agiles  * For this part of the course, we will use the pre-recorded videos provided by Prof. Olivier Barais and Prof. Johann Bourcier.\nLabs Professor: Benoit Combemale\nThe labs will consist in realizing the proposed tutorial, and the evaluation in a final demonstration complemented with Q\u0026amp;A (Feb 5th, 2021, 16h-18h). I will be online during the labs. Interact with me through the team IDOM2020 on Teams.\nFurther material   GIT cheat sheet by GitHub The Refcardz on Git, Maven and Jenkins Looking for good books? Here is a currated list of must-read professional books.  ","date":1601510400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601510400,"objectID":"ff26b996cc187c224b93c8bc9fba40bc","permalink":"https://people.irisa.fr/Benoit.Combemale/course/esir/esir1/","publishdate":"2020-10-01T00:00:00Z","relpermalink":"/Benoit.Combemale/course/esir/esir1/","section":"course","summary":"ESIR1-IoT-S6-IDOM The course will introduce the state-of-the-practice tools and methods employed in the software industry to develop modern and complex software-intensive systems.\nLectures Professor: Benoit Combemale\nExcept the introduction during the first lecture, all lectures will rely on pre-recorded videos* that you can watch asynchronously, at the latest during the slots scheduled in your agenda.","tags":["course"],"title":"Course materials for ESIR1 students","type":"course"},{"authors":null,"categories":null,"content":"ESIR2-SI-S7-VV Lectures Professor: Benoit Combemale\nExcept the introduction, all lectures will rely on pre-recorded videos* that you can watch asynchronously, at the latest during the slot scheduled in your agenda. The last 30 minutes of each lecture slot will be dedicated to office hours (on the Teams\u0026rsquo; group dedicated to the course), where we can discuss on questions you have on the lecture.\nIf you need reminders on object-oriented programming, please, go through the videos of chapters #1, #2 and #3.\n   Date Lecture Material Comment     Dec. 10th, 2020 (8h-10h) Introduction  welcome and introduction to modeling synchronous introduction on Teams (team VV2020)   Dec. 10th, 2020 (10h-12h) SOLID videos (chapter #4) asynchronous videos and office hours on Teams (11h00-12h)   Dec. 14th, 2020 (8h-10h) GRASP videos (chapter #5) asynchronous videos and office hours on Teams (9h00-10h)   Dec. 14th, 2020 (10h-12h) Design patterns videos (chapters #6 and #7) asynchronous videos and office hours on Teams (11h00-12h)   Jan. 6th, 2021 (10h-12h) Design patterns videos (chapters #6 and #7) asynchronous videos and office hours on Teams (11h00-12h)   Jan. 11th, 2021 (14h-16h) Métriques, Visualisation and Refactoring videos (chapter #8) asynchronous videos and office hours on Teams (15h00-16h)    * For this part of the course, we will use the pre-recorded videos provided by Prof. Sébastien Mosser at UQAM.\nLabs Professors: Benoit Combemale and Stéphanie Challita\n   Date Labs Material Comment     Dec. 17th, 2020 (10h-12h) Médiathèque  sujet    Jan. 4th, 2021 (14h-16h) Médiathèque  correction deadline: 08/01/21   Jan. 4th, 2021 (16h-18h) Mini-editeur  sujet    Jan. 6th, 2021 (14h-18h) Mini- editeur     Jan. 11th, 2021 (16h-18h) Mini-editeur  correction deadline: 29/01/21    Your professors will be online during the labs. Interact with them through the team VV2020 on Teams.\nFurther material   Slides on the UML language The Refcardz UML cheetsheet and the UML Diagrams website The Refcardz on Design Patterns Catalog of design pattern implementations: by Refactoring.Guru and S. Mosser Looking for good books? You may have a look to the textbooks Introduction to Software Design with Java, and UML@Classroom ( website). Here is also a currated list of must-read professional books.  ESIR2-SI-S8-MDI (part 1, incl. SI+IN) Lectures Professor: Benoit Combemale\nExcept the introduction during the first lecture, all lectures will rely on pre-recorded videos* that you can watch asynchronously, at the latest during the slots scheduled in your agenda.\n   Date Lecture Material Comment     Feb. 1st, 2021 (10h-12h) Tools for (Java) Development Industrialization  slides synchronous introduction on Teams (team MDI2020)   \u0026ndash; Gestion de dépendance et build  video, et démo Maven asynchronous videos and office hours on Teams   \u0026ndash; Gestion de version  video, avec Subversion et Git, et démo Git asynchronous videos and office hours on Teams   \u0026ndash; Intégration continue  video, et démo Jenkins asynchronous videos and office hours   \u0026ndash; Méthodes agiles  video asynchronous videos and office hours on Teams    * For this part of the course, we will use pre-recorded videos provided by Prof. Olivier Barais and Prof. Johann Bourcier.\nLabs Professors: Benoit Combemale and Stéphanie Challita\nThe labs will consist in implementing the proposed tutorial, and the evaluation will consist in a final demonstration with Q\u0026amp;A (~10min, during the last lecture on Feb. 23rd, 2021, 10h15-12h15). We will be online during the labs. Interact with us through the team MDI2020 on Teams.\nTentative timeline for the tutorial:\n [Part 1-4] Maven ~4h (requires lecture on Gestion de dépendance et build) [Part 5] Git ~2h (requires lecture on Gestion de version) [Part 6] Sonar ~1h (requires lecture on Intégration continue) [Part 7] Jenkins ~2h (requires lecture on Intégration continue) [Part 8] Gitlab ~3h (requires lecture on Intégration continue)  Further material   GIT cheat sheet by GitHub The Refcardz on Git, Maven and Jenkins  ESIR2-SI-S8-MDI (part 2) Lectures Professor: Benoit Combemale\n   Date Lecture Material Comment     Feb. 24th, 2021 (10h-12h) Introduction  slides synchronous introduction on Teams (team MDI2020)   Feb. 24th, 2021 (10h-12h), cond. Software testing at glance  slides synchronous on Teams (team MDI2020)   Mar. 08th, 2021 (08h-10h) Static analysis  slides on campus   Mar. 08th, 2021 (10h-12h) Dynamic testing  slides on campus   Mar. 16th, 2021 (10h-12h) Integration testing  slides synchronous on Teams (team MDI2020)   Mar. 16th, 2021 (10h-12h), cond. Test qualification and main criteria  slides synchronous on Teams (team MDI2020)   Mar. 16th, 2021 (10h-12h), cond. Mutation testing, and Test automation  slides synchronous on Teams (team MDI2020)    Conferences    Date Title Material Comment     Mar. 23rd, 2021 (10h-12h) Model-Based Testing  slides synchronous on Teams (team MDI2020)   Mar. 26th, 2021 (08h-10h) GUI Testing  slides synchronous on Teams (team MDI2020)   Apr. 02nd, 2021 (08h-10h) Security Testing  slides synchronous on Teams (team MDI2020)   Apr. 07th, 2021 (14h-16h) Performance Testing  slides synchronous on Teams (team MDI2020)    Labs Professors: Benoit Combemale and Gwendal Jouneaux\n  Practical Session #1 (4h)  Practical Session #2 (4h)  Practical Session #3 (4h)  Optional labs: if you want to experiment property-based testing and GUI testing, you may optionally have a look to Lab #4 and Lab #5, respectively.\nEvaluation    Date Lecture Material Comment     Apr. 08th, 2021 (10h-12h) Evaluation n/a synchronous on Teams (team MDI2020)    Further material  The textbook of the course Refcardz on Junit \u0026amp; Easymock, Mockito and Selenium.  ESIR2-SI-S8-AL: Software Architecture Professors: Johann Bourcier and Benoit Combemale\nLectures Except the introduction, all lectures will rely on pre-recorded videos that you can watch asynchronously.\nLecture #1, Apr. 01st, 2021 (08h-10h):\n  Introduction architecture logicielle  Introduction à la programmation orientée composant  Lecture #2, Apr. 01st, 2021 (10h-12h):\n  Approche orientée Service - les concepts  Approche orientée Service - Les technologies  Architecture orientée Message : MOM - principes  Lecture #3, Apr. 07th, 2021 (08h-10h):\n  Introduction to cloud computing  Introduction to cloud-native applications  Introduction to micro-services  Lecture #4, Apr. 12th, 2021 (14h-16h):\n  Introduction to Docker  Docker, under the hood  conclusion on cloud-native applications  Lectures #5 and #6 (conferences), Apr. 12th, 2021 (16h-18h) and Apr. 20th, 2021 (08h-10h):\n  De Java à un exécutable natif : GraalVM et Quarkus changent la donne (Emmanuel Bernard)  Quarkus: Comment faire une appli Java Cloud Native avec Graal VM (E. Bernard, C. Escoffier)  Labs Based on the aforementioned lectures, you might train yourself (individually) on Docker and Quarkus using the following tutorials:\n  Docker for Beginners  Quarkus Getting Started  Then, you have to constitute a project team of 5 people. Each team has to select a monolith application (to be validated with your professors) and to propose a microservicization of this application. For this purpose, you have to investigate the various tradeoffs (modularization, stateless vs stateful, orchestration vs. choreography, etc.), and to propose the new architecture of the application.\nAs a possible application, you might check-out the Remote meetings planning project, understand the application code and its underlying architecture (cf. the videos available on the readme), and make sure it works in development settings (i.e. on localhost).\nFor the evaluation, you will have to present your proposed architecture, and to discuss the various tradeoffs. You are not ask to provide any implementation that will be realized during the following project.\nEvaluation    Date Lecture Material Comment     May 07th, 2021 (08h-10h) Evaluation n/a synchronous on Teams (team AL2020)    Further material  Refcardz on Quarkus and Docker.  ESIR2-SI-S8-Projet: Software Development Project Professors: Johann Bourcier, Stéphanie Challita and Benoit Combemale\ntodo\u0026hellip;\n","date":1601510400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601510400,"objectID":"e1301b0cb4a9c6915ba13a7fd0e16a71","permalink":"https://people.irisa.fr/Benoit.Combemale/course/esir/esir2/","publishdate":"2020-10-01T00:00:00Z","relpermalink":"/Benoit.Combemale/course/esir/esir2/","section":"course","summary":"ESIR2-SI-S7-VV Lectures Professor: Benoit Combemale\nExcept the introduction, all lectures will rely on pre-recorded videos* that you can watch asynchronously, at the latest during the slot scheduled in your agenda. The last 30 minutes of each lecture slot will be dedicated to office hours (on the Teams\u0026rsquo; group dedicated to the course), where we can discuss on questions you have on the lecture.","tags":["course"],"title":"Course materials for ESIR2 students","type":"course"},{"authors":null,"categories":null,"content":"ESIR3-IoT-S9-GLIoT: Systems Engineering Teachers: Benoit Combemale and Johann Bourcier\n  Course introduction  Introduction to Systems Engineering  Group on Gitlab  ESIR3-SI-S9-DLC: DevOps Teachers: Benoit Combemale and Gwendal Jouneaux\n  Course introduction Introduction to DevOps: slides and video  Github repository  ","date":1601510400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601510400,"objectID":"439931ff8a971803f4a649c05746cfae","permalink":"https://people.irisa.fr/Benoit.Combemale/course/esir/esir3/","publishdate":"2020-10-01T00:00:00Z","relpermalink":"/Benoit.Combemale/course/esir/esir3/","section":"course","summary":"ESIR3-IoT-S9-GLIoT: Systems Engineering Teachers: Benoit Combemale and Johann Bourcier\n  Course introduction  Introduction to Systems Engineering  Group on Gitlab  ESIR3-SI-S9-DLC: DevOps Teachers: Benoit Combemale and Gwendal Jouneaux","tags":["course"],"title":"Course materials for ESIR3 students","type":"course"},{"authors":null,"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"e4df3dd8f2d2b27a7410c9052e5b4115","permalink":"https://people.irisa.fr/Benoit.Combemale/student/bumiller-phd/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/bumiller-phd/","section":"student","summary":"","tags":["currentphd"],"title":"","type":"student"},{"authors":null,"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"595b4720ba295de12d76206c6268f2a2","permalink":"https://people.irisa.fr/Benoit.Combemale/student/jouneaux-phd/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/jouneaux-phd/","section":"student","summary":"","tags":["currentphd"],"title":"","type":"student"},{"authors":["Manuel Leduc","Gwendal Jouneaux","Thomas Degueule","Gurvan Le Guernic","Olivier Barais","Benoit Combemale"],"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"3eb615d67273ae04e7daef118f3a2119","permalink":"https://people.irisa.fr/Benoit.Combemale/publication/ecmfa20-truffle/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/publication/ecmfa20-truffle/","section":"publication","summary":"Numerous language workbenches have been proposed over the past decade to ease the definition of Domain-Specific Languages (DSLs). Language workbenches enable language designers to specify DSLs using high-level metalanguages and to generate their implementation (e.g., parsers, interpreters) and tool support (e.g., editors, debuggers) automatically. However, little attention has been given to the performance of the resulting interpreters. In many domains where performance is key (e.g., scientific and high-performance computing), this forces language designer to hand-craft ad-hoc optimizations in the interpreter implementations, or to lose compatibility with tool support. In this paper, we propose to systematically exploit the domain-specific information of language specifications to derive optimized Truffle-based language interpreters executed over the GraalVM. We implement our approach on top of the Eclipse Modeling Framework (EMF) by complementing its existing compilation chain with Truffle-specific information, which drives the GraalVM to benefit from an optimized just-in-time compilation. A key benefit of our approach is that it leverages existing language specifications and does not require additional information from language designers who remain oblivious of Truffle's low-level intricacies and JIT optimizations in general while staying compatible with tool support. We evaluate our approach using a representative set of four DSLs and eight conforming programs. Compared to the standard interpreters generated by EMF running on the GraalVM, we observe an average speed-up of x1.14, ranging from x1.07 to x1.26. Although the benefits vary slightly from one DSL or program to another, we conclude that our approach yields substantial performance gains while remaining non-intrusive of EMF abstractions.","tags":null,"title":"Automatic generation of Truffle-based interpreters for Domain-Specific Languages","type":"publication"},{"authors":["Dorian Leroy","Erwan Bousse","Manuel Wimmer","Tanja Mayerhofer","Benoit Combemale","Wieland Schwinger"],"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"0c74de9493d4c588720782009234e828","permalink":"https://people.irisa.fr/Benoit.Combemale/publication/sosym20-behavioralinterface/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/publication/sosym20-behavioralinterface/","section":"publication","summary":"Executable Domain-Specific Languages (DSLs) enable the execution of behavioral models. While an ex- ecution is mostly driven by the model content (e.g., con- trol structures), many use cases require interacting with the running model, such as simulating scenarios in an au- tomated or interactive way, or coupling the model with other models of the system or environment. The manage- ment of these interactions is usually hardcoded into the semantics of the DSL, which prevents its reuse for other DSLs and the provision of generic tools (e.g., interactive debugger). In this paper, we propose a metalanguage for complementing the definition of executable DSLs with explicit behavioral interfaces to enable external tools to interact with executed models in a unified way. We im- plemented the proposed metalanguage in the GEMOC Studio, and show how behavioral interfaces enable the realization of tools that are generic, and thus, usable for different executable DSLs.","tags":null,"title":"Behavioral Interfaces for Executable DSLs","type":"publication"},{"authors":["Djamel Eddine Khelladi","Benoit Combemale","Mathieu Acher","Olivier Barais","Jean-Marc Jézéquel"],"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"d05ee1986fa5cab18dfca4ed895e54aa","permalink":"https://people.irisa.fr/Benoit.Combemale/publication/icse20-evolution/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/publication/icse20-evolution/","section":"publication","summary":"TBA.","tags":null,"title":"Co-evolving code with evolving metamodels","type":"publication"},{"authors":["Jean-Michel Bruel","Benoit Combemale","Esther Guerra","Jean-Marc Jézéquel","Joerg Kienzle","Juan de Lara","Gunter Mussbacher","Eugene Syriani","Hans Vangheluwe"],"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"0d001da7104ce5e5e64f4e0771ebbb4e","permalink":"https://people.irisa.fr/Benoit.Combemale/publication/sosym20-mtreuse/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/publication/sosym20-mtreuse/","section":"publication","summary":"Model transformations are essential elements of model-driven engineering (MDE) solutions, as they enable the automatic manipulation of models. MDE promotes the creation of domain-specific metamodels, but without proper reuse mechanisms, model transformations need to be developed from scratch for each new metamodel. In this paper, our goal is to understand whether transformation reuse across metamodels is needed by the community, evaluate its current state, identify practical needs and propose promising lines for further research. For this purpose, we first report on a survey to understand the reuse approaches used currently in practice and the needs of the community. Then, we propose a classification of reuse techniques based on a feature model and compare a sample of specific approaches—model types, concepts, a-posteriori typing, multilevel modeling, typing requirement models, facet-oriented modeling, mapping operators, constraint-based model types, and design patterns for model transformations—based on this feature model and a common example. We discuss strengths and weaknesses of each approach, provide a reading grid used to compare their features, compare with community needs, identify gaps in current transformation reuse approaches in relation to these needs and propose future research directions.","tags":null,"title":"Comparing and classifying model transformation reuse approaches across metamodels","type":"publication"},{"authors":["June Sallou","Alexandre Gauvain","Johann Bourcier","Benoit Combemale","Jean-Raynald de Dreuzy"],"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"3c4e15b0ffe190d1404fd20d1443c301","permalink":"https://people.irisa.fr/Benoit.Combemale/publication/iccs20-loopagregation/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/publication/iccs20-loopagregation/","section":"publication","summary":"TBA.","tags":null,"title":"Loop Aggregation for Approximate Scientific Computing","type":"publication"},{"authors":["Andreas Wortmann","Olivier Barais","Benoit Combemale","Manuel Wimmer"],"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"f849e6ec61864604bbb9c2a428aa7c5b","permalink":"https://people.irisa.fr/Benoit.Combemale/publication/sosym20-industry4.0/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/publication/sosym20-industry4.0/","section":"publication","summary":"TBA.","tags":null,"title":"Modeling Languages in Industry 4.0: An Extended Systematic Mapping Study","type":"publication"},{"authors":["Dorian Leroy","Pierre Jeanjean","Erwan Bousse","Manuel Wimmer","Benoit Combemale"],"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"14a6772be6d24c4a1bc29be42c8b9a0e","permalink":"https://people.irisa.fr/Benoit.Combemale/publication/ecmfa20-monitoring/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/publication/ecmfa20-monitoring/","section":"publication","summary":"Runtime monitoring is a fundamental technique used throughout the lifecycle of a system for many purposes, such as debugging, testing, or live analytics. While runtime monitoring for general purpose programming languages has seen a great amount of research, developing such complex facilities for any executable Domain Specific Language (DSL) remains a challenging, reoccurring and error prone task. A generic solution must both support a wide range of executable DSLs (xDSLs) and induce as little execution time overhead as possible. Our contribution is a fully generic approach based on a temporal property language with a semantics tailored for runtime verification. Properties can be compiled to efficient runtime monitors that can be attached to any kind of executable discrete event model within an integrated development environment. Efficiency is bolstered using a novel combination of structural model queries and complex event processing. Our evaluation on 3 xDSLs shows that the approach is applicable with an execution time overhead of 121% (on executions shorter than 1s), to 79% (on executions shorter than 20s) making it suitable for model testing and debugging.","tags":null,"title":"Runtime Monitoring for Executable DSLs","type":"publication"},{"authors":["Manuel Leduc","Thomas Degueule","Eric Van Wyk","Benoit Combemale"],"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"08b11eb852bdd213640d5ad0f14e5ab9","permalink":"https://people.irisa.fr/Benoit.Combemale/publication/sosym20-lep/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/publication/sosym20-lep/","section":"publication","summary":"The problem of software language extension and composition drives much of the research in Software Language Engineering (SLE). Although various solutions have already been proposed, there is still little understanding of the specific ins and outs of this problem, which hinders the comparison and evaluation of existing solutions. In this SoSyM Expert Voice, we introduce the Language Extension Problem as a way to better qualify the scope of the challenges related to language extension and composition. The formulation of the problem is similar to the seminal Expression Problem introduced by Wadler in the late nineties, and lift it from the extensibility of single constructs to the extensibility of groups of constructs, i.e., software languages. We provide a comprehensive definition of the actual constraints when considering language extension, and believe the Language Extension Problem will drive future research in SLE, the same way the original Expression Problem helped to understand the strengths and weaknesses of programming languages and drove much research in programming languages.","tags":null,"title":"The Software Language Extension Problem","type":"publication"},{"authors":["Jörg Kienzle","Gunter Mussbacher","Benoit Combemale","Lucy Bastin","Nelly Bencomo","Jean-Michel Bruel","Christoph Becker","Stefanie Betz","Ruzanna Chitchyan","Betty Cheng","Sonja Klingert","Richard Paige","Birgit Penzenstadler","Norbert Seyff","Eugene Syriani","Colin C Venters"],"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"61dd50326efd60475cb49cf648474c5b","permalink":"https://people.irisa.fr/Benoit.Combemale/publication/cacm20-sustainability/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/publication/cacm20-sustainability/","section":"publication","summary":"Sustainability has emerged as a concern of central relevance. As a wicked problem, it poses challenges to business-as-usual in many areas, including that of modeling. This article addresses a question at the intersection of model-driven engineering and sustainability research: How can we better support sustainability by bringing together model-driven engineering, data, visualization and self-adaptive systems, to facilitate engagement, exploration, and understanding of the effects that individual and organizational choices have on sustainability? We explore this question via an idealized vision of an evaluation environment that facilitates integration and mapping of models from multiple diverse sources, visual exploration, and evaluation of what-if scenarios, for stakeholders with divergent perspectives. The article identifies research challenges to be addressed to enable decision making to support sustainability and provides a map of sustainability modeling issues across disciplines.","tags":null,"title":"Towards Model-Driven Sustainability Evaluation","type":"publication"},{"authors":null,"categories":null,"content":"","date":1569888000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569888000,"objectID":"3bfc312cfb678360237b17c307cc5316","permalink":"https://people.irisa.fr/Benoit.Combemale/student/jouneaux-msc/","publishdate":"2019-10-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/jouneaux-msc/","section":"student","summary":"","tags":["pastmsc"],"title":"Self-Adaptable Virtual Machines","type":"student"},{"authors":null,"categories":null,"content":"","date":1564617600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564617600,"objectID":"0024c8520185daccfa1a7afc46548bd1","permalink":"https://people.irisa.fr/Benoit.Combemale/project/langcomponent/","publishdate":"2019-08-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/langcomponent/","section":"project","summary":"2019-2022: Grant from the French _Pôle d'Excellence Cyber_. PI.","tags":["current"],"title":"Efficient Reuse of Language Components  (LangComponent)","type":"project"},{"authors":null,"categories":null,"content":"","date":1561939200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1561939200,"objectID":"524a7a62f7f04e080a0ba0fe927387f6","permalink":"https://people.irisa.fr/Benoit.Combemale/student/chebbi/","publishdate":"2019-07-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/chebbi/","section":"student","summary":"","tags":["currentphd"],"title":"","type":"student"},{"authors":null,"categories":null,"content":"Benoit Combemale (Univ. Rennes 1) Curriculum  Introduction  Some Facts on Modern Developments State of the Practice (large-scale, polyglot, short term delivery\u0026hellip;) DevOps: current scope, concepts and principles   Get ready for DevOps!  Execution platform (e.g., virtual machines, containerization and clouds), Software architecture (microservice, stateless, serverless, FaaS), organizational concerns (gitflow and branching, continuous improvement\u0026hellip;)   Test automation, incl. static analysis, flaky test, code and test coverage, mutation analysis. Build Management, Configuration Management, Release Management  Software Build (e.g., Maven) Software Delivery (e.g., Docker, Docker Compose) Software Deployment (e.g., Kubernetes) Continuous Integration, Delivery and deployment (e.g., Jenkins) Code quality (e.g., SonarQube) Infrastructure as code (e.g., Ansible, Puppet, chef, SaltStack), software bots   Observability and Measurement: Logging, Tracing and Monitoring (e.g., LogStash, OpenTracing, Kibana) Fuzzing, A/B and Canary Testing Resilience engineering / testing (e.g., Chaos Engineering) DevOps and Security  Further Materials   TeachDevOps Initiative  Related research papers (see section Resilience Engineering and in Practice)  ","date":1556668800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556668800,"objectID":"664a3998cba155f59aa7a67b39347778","permalink":"https://people.irisa.fr/Benoit.Combemale/course/devops/","publishdate":"2019-05-01T00:00:00Z","relpermalink":"/Benoit.Combemale/course/devops/","section":"course","summary":"Benoit Combemale (Univ. Rennes 1) Curriculum  Introduction  Some Facts on Modern Developments State of the Practice (large-scale, polyglot, short term delivery\u0026hellip;) DevOps: current scope, concepts and principles   Get ready for DevOps!","tags":["course"],"title":"DevOps","type":"course"},{"authors":null,"categories":null,"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546300800,"objectID":"e3bb6c80846d34434292c6317c5c3be8","permalink":"https://people.irisa.fr/Benoit.Combemale/project/debug4science/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/debug4science/","section":"project","summary":"2020-2022: Bilateral collaboration with the CEA DAM. PI.","tags":["current"],"title":"Debug4Science","type":"project"},{"authors":null,"categories":null,"content":"","date":1538352000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538352000,"objectID":"57b2f9d38d22c6e3928ac8f2c3185b0c","permalink":"https://people.irisa.fr/Benoit.Combemale/student/sallou/","publishdate":"2018-10-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/sallou/","section":"student","summary":"","tags":["currentphd"],"title":"","type":"student"},{"authors":null,"categories":null,"content":"","date":1514764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514764800,"objectID":"decc189c2dc168ff17564227b3995688","permalink":"https://people.irisa.fr/Benoit.Combemale/project/idm4sco/","publishdate":"2018-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/idm4sco/","section":"project","summary":"2018-2019: National network on MDE for software related to complex systems. Co-PI with [Serge Stinckwich](http://www.doesnotunderstand.org/).","tags":["finished"],"title":"French Research Network on Model-Driven Engineering for Complex Systems (IDM4SCO)","type":"project"},{"authors":null,"categories":null,"content":"","date":1514764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514764800,"objectID":"25b410c9cf8fa3f73116bd0a151ee448","permalink":"https://people.irisa.fr/Benoit.Combemale/project/glose/","publishdate":"2018-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/glose/","section":"project","summary":"2018-2021: industrial collaboration Safran/Inria/CNRS (network DESIR). PI for CNRS.","tags":["current"],"title":"GLObalization in Systems Engineering (GLOSE)","type":"project"},{"authors":null,"categories":null,"content":"","date":1512086400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512086400,"objectID":"42648b83678a4d7100f8567340eac3a2","permalink":"https://people.irisa.fr/Benoit.Combemale/student/jeanjean-phd/","publishdate":"2017-12-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/jeanjean-phd/","section":"student","summary":"","tags":["currentphd"],"title":"","type":"student"},{"authors":null,"categories":null,"content":"","date":1512086400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512086400,"objectID":"0f287f454d88f6767628768521cf7e41","permalink":"https://people.irisa.fr/Benoit.Combemale/student/jeanjean/","publishdate":"2017-12-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/jeanjean/","section":"student","summary":"","tags":["pastmsc"],"title":"Towards unpredictable languages","type":"student"},{"authors":null,"categories":null,"content":"","date":1508371200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508371200,"objectID":"6ed4be6c2f86c9284a4b5d76129d45ec","permalink":"https://people.irisa.fr/Benoit.Combemale/student/coulon/","publishdate":"2017-10-19T00:00:00Z","relpermalink":"/Benoit.Combemale/student/coulon/","section":"student","summary":"","tags":["currentphd"],"title":"","type":"student"},{"authors":null,"categories":null,"content":"Benoit Combemale (Univ. Rennes 1, ESIR \u0026amp; IRISA) DiverSE team (IRISA \u0026amp; Inria) Campus de Beaulieu F-35042 Rennes Cedex benoit.combemale AT irisa.fr Description Model Driven Engineering (MDE) is primarily concerned with reducing the accidental complexities associated with developing complex software-intensive systems. This is accomplished through the use of technologies that support rigorous analysis and transformation of abstract descriptions of software to concrete implementations. At the core of MDE are modeling languages that are typically defined as metamodels. Developers can use these modeling languages to describe complex systems at multiple levels of abstraction and from a variety of perspectives. MDE is essentially concerned with transforming descriptions of software artefacts to other forms that better serve specific purposes. MDE is now becoming mature, and more and more integrated in industrial software development processes to improve quality and productivity, as recognized in various experience reports.\nThis course introduces the cornerstones of MDE using OMG standards and Eclipse-based open source technologies. You will discover how to leverage your experience into domain-specific modelling languages and model transformations. Then, you will learn how to use them to systematize some development tasks (\u0026quot;Why I\u0026rsquo;d like write program that write programs rather than write programs?\u0026ldquo;), and to lead to better quality software thanks to abstract models throughout the software development process.\nTextbooks  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\nLectures (Materials) Basics  Advanced Features of Software Engineering: from Modeling to Metamodeling... Domain-Specific Languages A Tutorial about Metamodeling Using OMG Norms and Eclipse Modeling Object Constraint Language (OCL) Model Transformation (Principles, Standards and Examples) Model Management with Xtend Kermeta: Breathe Life into your Metamodels Atlas Transformation Language (ATL)  Advanced  Model Typing Model Composition How to address V\u0026amp;V in Model-Driven Engineering? Hyper-Agility: A Model-Driven Software Agility from Design-Time to Run-Time (la vidéo !) MDE Pragmatique  Further Information Some Documents\u0026hellip;  Métamodéliser avec Eclipse Modeling Framework (from S. Mosser) Free refcard about EMF Tutorial \"Define a metamodel with ECore Tools\" The Kermeta memento OMG Formal Specifications  Some Links\u0026hellip;  OMG (Object Management Group) Eclipse Modeling Kermeta Action IDM   Tools: GEMOC Studio, EcoreTools, Xtext, Xtend, ALE, Kermeta 2 (memento), Kermeta 3 The MODELS conf MDEBoK (?) modeling-languages  ","date":1508371200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508371200,"objectID":"1c6d5c9da88112a9223c3b6b14b380a9","permalink":"https://people.irisa.fr/Benoit.Combemale/course/mde/","publishdate":"2017-10-19T00:00:00Z","relpermalink":"/Benoit.Combemale/course/mde/","section":"course","summary":"Benoit Combemale (Univ. Rennes 1, ESIR \u0026amp; IRISA) DiverSE team (IRISA \u0026amp; Inria) Campus de Beaulieu F-35042 Rennes Cedex benoit.combemale AT irisa.fr Description Model Driven Engineering (MDE) is primarily concerned with reducing the accidental complexities associated with developing complex software-intensive systems.","tags":["course"],"title":"Model-Driven Engineering","type":"course"},{"authors":null,"categories":null,"content":"Supports de cours   Java - les bases du langage  Java - programmation avancée  Interface graphique avec Swing  OSGi  Web Services  Supports de TD, TP et projet   TD1  TP1 (classe Console, et sa javadoc, de Xavier Crégut) et TP2  Projet météo, et les sources du projet météo (à compléter !)  TP OSGi  TP WebService, et les sources du TP web services (à compléter !)  Outils et Documents complémentaires   IDE Eclipse (Eclipse IDE for Java EE Developers, ou Eclipse IDE for Java Developers)  Java™ Platform, Standard Edition 6, API Specification  The Java™ Language Specification (book)  La refcard sur Java (a télécharger gratuitement !)   Cours Java (très complet) de Xavier Crégut  Cours Swing de Xavier Crégut  Apache Felix (OSGi)  Apache CXF (Web Services)  ","date":1508371200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508371200,"objectID":"f392b5384f109bd4e84f1606a6814925","permalink":"https://people.irisa.fr/Benoit.Combemale/course/oop/","publishdate":"2017-10-19T00:00:00Z","relpermalink":"/Benoit.Combemale/course/oop/","section":"course","summary":"Supports de cours   Java - les bases du langage  Java - programmation avancée  Interface graphique avec Swing  OSGi  Web Services  Supports de TD, TP et projet   TD1  TP1 (classe Console, et sa javadoc, de Xavier Crégut) et TP2  Projet météo, et les sources du projet météo (à compléter !","tags":["course"],"title":"Object-Oriented Programming","type":"course"},{"authors":null,"categories":null,"content":"Benoit Combemale (Univ. Rennes 1, ESIR \u0026amp; IRISA) DiverSE team (IRISA \u0026amp; Inria) Campus de Beaulieu F-35042 Rennes Cedex benoit.combemale AT irisa.fr Lectures (Materials)  Modeling in Software Engineering UML Basics: An introduction to the Unified Modeling Language (UML) Analyse à objet avec UML The Object Constraint Language (OCL) Design Patterns Implementation patterns, bad smells, refactoring and tools Refactoring Tools and Methods-- A Short Introduction about Systems Engineering and SysML  Not maintained (and possibly outdated!)  Introduction à la notion de composant, SOA, Web Services Agilité: Le Bon, la Brute et le Truand ! Les processus de développement La gestion de projet  Additional materials  MDI: ESIR2 IN and SI (2016-2017)  Further Materials  J.-M. Jézéquel's course materials, including the recommended textbook Développement de logiciel à objets avec UML (J.-M. Jézéquel, N. Plouzeau, Y. Le Traon, Université de Rennes 1, Poly C119) UML cheatsheet and reference guides Ressources about design patterns at SourceMaking RefCardz Design Patterns RefCardz Continuous Integration: Servers and Tools Eclipse Modeling OMG (Object Management Group: UML, SysML, OCL...)  ","date":1508371200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508371200,"objectID":"05989986e072927c331529ce0ea18dd8","permalink":"https://people.irisa.fr/Benoit.Combemale/course/modeling/","publishdate":"2017-10-19T00:00:00Z","relpermalink":"/Benoit.Combemale/course/modeling/","section":"course","summary":"Benoit Combemale (Univ. Rennes 1, ESIR \u0026amp; IRISA) DiverSE team (IRISA \u0026amp; Inria) Campus de Beaulieu F-35042 Rennes Cedex benoit.combemale AT irisa.fr Lectures (Materials)  Modeling in Software Engineering UML Basics: An introduction to the Unified Modeling Language (UML) Analyse à objet avec UML The Object Constraint Language (OCL) Design Patterns Implementation patterns, bad smells, refactoring and tools Refactoring Tools and Methods-- A Short Introduction about Systems Engineering and SysML  Not maintained (and possibly outdated!","tags":["course"],"title":"Software (and Systems) Modeling and Architecture","type":"course"},{"authors":null,"categories":null,"content":"Benoit Combemale (Univ. Toulouse \u0026 Inria) Description Software engineering faces new challenges with the advent of modern software-intensive systems such as complex critical embedded systems, cyber-physical systems and Internet of things. Application domains range from robotics, transportation systems, defense to home automation, smart cities, and energy management, among others. Software is more and more pervasive, integrated into large and distributed systems, and dynamically adaptable in response to a complex and open environment. As a major consequence, the engineering of such systems involves multiple stakeholders, each with some form of domain-specific modeling.\nModel-Driven Engineering (MDE) aims at reducing the accidental complexity associated with developing complex software-intensive systems through the use of modeling techniques that support separation of concerns and automated generation of system artifacts from models. Separation of concerns is founded on the exploitation of different domain-specific modeling languages (DSLs), each providing constructs based on abstractions that are specific to a concern of a system. As such, DSLs are “the heart and soul” of MDE, and have major consequences on the industrial development processes.\nThe integration of domain-specific concepts and best practices development experience into DSLs can significantly improve software and systems engineers productivity and system quality. For such a purpose, the development of DSLs has been recently recognized as a significant software engineering task itself. Indeed, the development of DSLs is a challenging task which requires specialized knowledge. This recently resulted in the emergence of Software Language Engineering (SLE), defined as the application of systematic, disciplined, and measurable approaches to the development, use, deployment, and maintenance of software languages.\nThis course provides an end-to-end coverage of the engineering of modeling languages to turn domain knowledge into tools. It introduces the foundations of SLE, with a specific focus on the use of modeling techniques for designing and implementing DSLs. It also provides various illustrations through the definition of different kinds of modeling languages, their instrumentation with tools such as editors, interpreters and generators, the integration of multiple modeling languages to achieve a system view, and the validation of both models and tools.\nThe course starts with definitions of modeling and MDE, and then moves into a deeper discussion of how to express the knowledge of particular domains using modeling languages to ease the development of systems in the domains. The second part presents examples of applications of the model-driven approach to different types of software systems. In addition to illustrating the unification power of models in different software domains, this part demonstrates applicability from different starting points (language, business knowledge, standard, etc.) and focuses on different software engineering activities such as Requirement Engineering, Analysis, Design, Implementation, and V\u0026amp;V.\nTextbooks \nLectures (Materials)  From MDE to SLE Pragmatics of SLE Domain-Specific Languages: Basics Domain-Specific Languages: Advanced (staging, att. grammars, typing, op. semantics...) Language workbenches Program and model transformation (static analysis, code/test/doc generation...) Program and model execution, simulation and debugging Program and model composition (merge, coordination, synchronization)  Further Materials  Language workbenches SLE conference SLEBoK DSL book (ralf)  ","date":1508371200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508371200,"objectID":"54b7415de38baed56f622b3cfe37149b","permalink":"https://people.irisa.fr/Benoit.Combemale/course/sle/","publishdate":"2017-10-19T00:00:00Z","relpermalink":"/Benoit.Combemale/course/sle/","section":"course","summary":"Benoit Combemale (Univ. Toulouse \u0026 Inria) Description Software engineering faces new challenges with the advent of modern software-intensive systems such as complex critical embedded systems, cyber-physical systems and Internet of things.","tags":["course"],"title":"Software Language Engineering","type":"course"},{"authors":null,"categories":null,"content":"Lectures (videos in french, slides in english)  Software Validation \u0026 Verification: a gentle introduction Software testing at glance Static analysis Dynamic testing Integration testing Test qualification and main criteria Mutation testing Test automation Software testing: looking ahead  A textbook (by Oscar Luis Vera-Pérez) complements the lectures.\nFurther material, information and references TBA.\nRefcard about JUnit and EasyMock  EasyMock website EclEmma website PMD website Selenium website DbUnit website  -- Acknowledgement This course is evolving since a long time, with the contributions of various colleagues, including Yves Le Traon, Benoit Baudry and Oscar Luis Vera-Pérez.\n","date":1508371200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508371200,"objectID":"9ca0b7d20187ed7f0a2c7aef99e693a4","permalink":"https://people.irisa.fr/Benoit.Combemale/course/vv/","publishdate":"2017-10-19T00:00:00Z","relpermalink":"/Benoit.Combemale/course/vv/","section":"course","summary":"Lectures (videos in french, slides in english)  Software Validation \u0026 Verification: a gentle introduction Software testing at glance Static analysis Dynamic testing Integration testing Test qualification and main criteria Mutation testing Test automation Software testing: looking ahead  A textbook (by Oscar Luis Vera-Pérez) complements the lectures.","tags":["course"],"title":"Software Validation and Verification","type":"course"},{"authors":null,"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"140d27af2829549a8320439ff84c6e74","permalink":"https://people.irisa.fr/Benoit.Combemale/project/ale/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/ale/","section":"project","summary":"2017-2022: Inria associate team with the SWAT team at CWI. Co-PI with [Tijs van der Storm](http://homepages.cwi.nl/~storm/).","tags":["current"],"title":"Agile Language Engineering (ALE)","type":"project"},{"authors":null,"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"d985b649e90031dea77b883aca296cf2","permalink":"https://people.irisa.fr/Benoit.Combemale/project/emma/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/emma/","section":"project","summary":"2017-2018: WTZ (AT) / PHC Amadeus (FR) grant between TU Wien and Univ. Toulouse. Co-PI with [Tanja Mayerhofer](https://www.big.tuwien.ac.at/people/tanja-mayerhofer/).","tags":["finished"],"title":"Engineering xDSML (EMMA)","type":"project"},{"authors":null,"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"0491892eb51df71aafa537e0c4880700","permalink":"https://people.irisa.fr/Benoit.Combemale/project/kaulua/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/kaulua/","section":"project","summary":"2017-2020: Bilateral collaboration (CIFRE) with the Obeo company. PI.","tags":["finished"],"title":"Kaulua","type":"project"},{"authors":null,"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"14151a8d3d6c278e1641094f7e4b2041","permalink":"https://people.irisa.fr/Benoit.Combemale/project/resist/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/resist/","section":"project","summary":"2021-2023: Inria associate team with Simula, Norway.","tags":["current"],"title":"Resilient Software Science (RESIST)","type":"project"},{"authors":null,"categories":null,"content":"","date":1477958400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1477958400,"objectID":"754c3ba50c1020bcef6a3e6b66e0cf21","permalink":"https://people.irisa.fr/Benoit.Combemale/student/leroy/","publishdate":"2016-11-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/leroy/","section":"student","summary":"","tags":["currentphd"],"title":"","type":"student"},{"authors":null,"categories":null,"content":"","date":1477958400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1477958400,"objectID":"5d97b94404d78cf2e57474f071b8ee6e","permalink":"https://people.irisa.fr/Benoit.Combemale/student/leduc/","publishdate":"2016-11-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/leduc/","section":"student","summary":"","tags":["previousphd"],"title":"On modularity and performances of external domain-specific language implementations","type":"student"},{"authors":null,"categories":null,"content":"Abstract  \"Towards Language-Oriented Modeling\", Benoit Combemale [thesis, slides, video] Software engineering faces new challenges with the advent of modern software-intensive systems such as complex critical embedded systems, cyber-physical systems and Internet of things. Application domains range from robotics, transportation systems, defense to home automation, smart cities, and energy management, among others. Software is more and more pervasive, integrated into large and distributed systems, and dynamically adaptable in response to a complex and open environment. As a major consequence, the engineering of such systems involves multiple stakeholders, each with some form of domain-specific knowledge, and with an increasingly use of software as an integration layer. Model-Driven Engineering (MDE) aims at reducing the accidental complexity associated with developing complex software-intensive systems through the use of modeling techniques that support separation of concerns and automated generation of system artifacts from models. Separation of concerns is founded on the exploitation of different domain-specific modeling languages (DSMLs), each providing constructs based on abstractions that are specific to a concern of a system. As such, DSMLs are \u0026ldquo;the heart and soul\u0026rdquo; of MDE, and have major consequences on the industrial development processes.\nThe integration of domain-specific concepts and best practices development experience into DSMLs can significantly improve software and systems engineers productivity and system quality. Yet, the development of DSMLs has only been recently recognized as a significant software engineering task itself. Indeed, the development of DSMLs is a challenging task which requires specialized knowledge. This recently resulted in the emergence of Software Language Engineering (SLE), defined as the application of systematic, disciplined, and measurable approaches to the development, use, deployment, and maintenance of languages.\nMDE encompasses the identification of added-value domain knowledge, and SLE covers the technical activities to develop DSMLs. However, the interplay between both is still challenging: how to turn application-level and business knowledge into added-value DSMLs? How to scale-up with their multiplication due to the various stakeholders and application domains of interest? Answering these questions is at the core of my research activities for 10 years. The challenge is twofold: to capture domain-specific knowledge into added-value DSMLs while supporting their possible reuse and customization in other contexts; and to support the separation of concerns through the use of multiple DSMLs while ensuring their automatic and correct integration.\nIn this habilitation à diriger des recherches (HDR), I review a decade of research work in the fields of MDE and SLE. I propose contributions to support a language-oriented modeling, with the particular focus on enabling early validation \u0026amp; verification (V\u0026amp;V) of software-intensive systems. I first present foundational concepts and engineering facilities which help to capture the core domain knowledge into the various heterogeneous concerns of DSMLs (aka. metamodeling in the small), with a particular focus on executable DSMLs to automate the development of dynamic V\u0026amp;V tools. Then, I propose structural and behavioral DSML interfaces, and associated composition operators to reuse and integrate multiple DSMLs (aka. metamodeling in the large).\nIn these research activities I explore various breakthroughs in terms of modularity and reusability of DSMLs. I also propose an original approach which bridges the gap between the concurrency theory and the algorithm theory, to integrate a formal concurrency model into the execution semantics of DSMLs. All the contributions have been implemented in software platforms \u0026ndash; the language workbench Melange and the GEMOC studio - and experienced in real-world case studies to assess their validity. In this context, I also founded the GEMOC initiative, an attempt to federate the community on the grand challenge of the globalization of modeling languages.\nCommittee  Prof. Franck Barbier, University of Pau, FR (reviewer) Prof. Lionel Briand, University of Luxembourg, LU (reviewer) Prof. Betty Cheng, Michigan State University, USA (reviewer) Prof. Oscar Nierstrasz, University of Bern, CH (reviewer) Prof. Joerg Kienzle, McGill University, CA (examiner) Prof. Peter Mosses, Swansea University, UK (examiner) Dr. Benoit Baudry, INRIA, FR (examiner) Prof. Jean-Marc Jézéquel, University of Rennes 1, FR (examiner)  Further materials  Document of the HDR thesis Slides of the defense Video of the defense My publications (full list, preprints on HAL, DBLP, Google Scholar) DiverSE's SLE Seminar 2015 about the recent activities in the team about software language engineering The GEMOC initiative and studio The Melange language workbench   [slideshare id=57496497\u0026doc=hdr-combemale-slides-160126085012] \nOverall Program December 3, 2015: Seminar on Software Engineering  14:25-14:30: Welcome and introduction 14:30-15:15: \u0026quot;Dealing with Uncertainty in Self-Adaptive Systems\u0026quot; (Prof. Betty H.C. Cheng, Michigan State University, US) 15:15-15:45: \u0026quot;An attempt to software adaptation classification, illustration with State Chart XML\u0026quot; (Prof. Franck Barbier, University of Pau, FR) 15:45-16:15: coffee break 16:15-17:00: \u0026quot;Traceability Beyond Source Code: An Elusive Target?\u0026quot; (Prof. Lionel Briand, University of Luxembourg, LU) 17:00-17:45: \u0026quot;Domain-Specific Development Tools\u0026quot; (Prof. Oscar Nierstrasz, University of Bern, CH)  December 4, 2015: HDR defense  09:30-11:30: \u0026quot;Towards Language-Oriented Modeling\u0026quot; (HDR defense, Benoit Combemale) 11:30-12:30: reception  Venue All the events will take place in the room Petri-Turing at Inria Rennes, France. How to reach there? ","date":1461103200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1515798000,"objectID":"eb3bb1235acb3fcad4bed560233124be","permalink":"https://people.irisa.fr/Benoit.Combemale/about/hdr/","publishdate":"2016-04-20T00:00:00+02:00","relpermalink":"/Benoit.Combemale/about/hdr/","section":"about","summary":"HDR","tags":null,"title":"HDR of Prof. Benoit Combemale","type":"about"},{"authors":null,"categories":null,"content":"Journals  Deputy Editor in Chief of the platinum opeen access journal JOT on Software and language engineering. Member of the Editorial Boards of the Springer Journal on Software and Systems Modeling (SoSyM), the Springer Software Quality Journal (SQJ), the Elsevier Journal of Computer Languages (COLA), and the Elsevier Journal on Science of Computer Programming (SCP, Advisory Board of the Software Section). Regular reviewer for various software engineering journals, e.g., the Springer Journal on Software and System Modeling (SoSym), ACM Survey, and IEEE Transactions on Software Engineering (TSE).  Conferences and Workshops  Steering Committee of the ACM SIGPLAN Intl. Conference on Software Language Engineering (member since 2014, and chair since 2018) Steering Committee of the Modeling Language Engineering and Execution (MLE) workshop (founding member, since 2019)  2021\n Finance Chair for ICPE'21 Program board member for MODELS'21 PC member for RE'21 PC member for ISEC'21 PC member for ECMFA'21 PC member for EASE'21 PC member for EduSymp at MODELS'21 PC member for DevOps4CPS-Testing at ICST'21 PC member for the Eclipse SAAM Mobility 2021 conference  2020\n PC co-chair for ICT4S 2020 Tools \u0026amp; Demos co-chair for MODELS'20 Selection Committee ACM SRC for MODELS'20 Program board member for MODELS'20 PC member for ECMFA'20 PC member for FDL'20 PC member for CBI'20 PC member for QUATIC'20 PC member for the MLE'20 workshop at MODELS'20 PC member for the DevOps@MODELS'20 workshop at MODELS'20 PC member for the CoMoDiTy'20 workshop at ER'20 PC member for the PNSE'20 workshop PC member for the MoSC'20 workshop  2019\n PC chair (Foundation track) for ECMFA 2019 PC member for ICMT'19 Selection Committee member for the Doctoral Symposium at MODELS'19 PC member for the MLE'19 workshop at MODELS'19 PC member for the DevOps@MODELS'19 workshop at MODELS'19 PC member for the FlexMDE'19 workshop at MODELS'19 PC member for the PNSE'19 workshop  2018\n PB member for MODELS'18, and co-organizer of the co-located Industry day 2018 Co-chair of the workshop GEMOC at MODELS'18 (proceedings) PC member for ICMT'18 PC member for ECMFA'18 PC member for the MiSE'18 workshop at ICSE'18 PC member for the EXE'18 workshop at MODELS'18 PC member for the MDEbug'18 workshop at MODELS'18 PC member for the DevOps'18 workshop Co-organizer of the session \u0026ldquo;Application of Advanced Software Engineering Tools and Methods in the Environmental Sciences\u0026rdquo; at CMWR'18  2017\n General chair for SLE 2017 Coordinator of the Dagstuhl Seminar 17342 on \u0026ldquo;The Software Language Engineering Body of Knowledge\u0026rdquo; (SLEBoK) PC member for ICMT'17 PC member for MODELS'17 PC member for the EXE'17 workshop at MODELS'17 PC member for the MDEbug'17 workshop at MODELS'17 PC member for the GEMOC'17 workshop at MODELS'17 PC member for the MiSE'17 workshop at ICSE'17 PC member for the MoMo'17 workshop at Modularity'17  2016\n General chair for MODELS 2016 PC member for ECMFA'16 PC member for ICMT'16 PC member for the GEMOC'16 workshop at MODELS'16 PC member for the EXE'16 workshop at MODELS'16 PC member for the MiSE'16 workshop at ICSE'16 PC member for the LaMOD'16 workshop at Modularity'16 PC member for the MoMo'16 workshop at Modularity'16  2015\n Co-chair of the workshop GEMOC at MODELS'15 (proceedings) Co-chair of the workshop Sustainability'15 at Modularity 2015 PC member for SLE'15 PC member for SEFM'15 PC member for ICMT'15 PC member for ECMFA'15 PC member for ICSSP'15 Panel co-chair for MODELS 2015 Tutorials PC member for MODELS'15 PC member for the MPM'15 workshop at MODELS'15 PC member for the EXE'15 workshop at MODELS'15 PC member for the MiSE'15 workshop at ICSE'15  2014\n PC co-chair for SLE 2014 Coordinator of the Dagstuhl Seminar 14412 on \u0026ldquo;Globalizing Domain-Specific Languages\u0026quot; (LNCS book) Co-chair of the workshop GEMOC at MODELS'14 (proceedings) Demonstration co-chair for MODELS 2014 Organizing Committee member for the summer school MDD4DRES 2014 PC member for APSEC'14 PC member for ICMT'14 PC member for ECMFA'14 PC member for the VOLT'14 workshop at STAF'14 PC member for the MPM'14 workshop at MODELS'14 PC member for the CSP track at WETICE'14  2013\n Co-chair of the workshop GEMOC at MODELS'13 (proceedings) Co-chair of the workshop GlobalDSL at ECOOP, ECMFA and ECSA 2013 (proceedings) PC member for APSEC'13 PC member for SEFM'13 PC member for ICMT'13 PC member for ECMFA'13 PC member for QSIC'13 PC member for EduSymp @ MoDELS 2013 PC member for the AMT'13 workshop at MODELS'13 PC member for the CMA@MODELS'13 workshop at MODELS'13 PC member for the CMA@RE'13 workshop at RE'13 PC member for the VOLT'13 workshop at ICMT'13 External reviewer for ICSE'13  2012\n Co-chair of the 8th International Educators\u0026rsquo; Symposium (EduSymp 2012) @ MoDELS 2012 (proceedings) Organizing Committee member and Sponsorship chair for GDR-GPL'12 \u0026amp; CIEL'12 PC member for APSEC'12 PC member for SEFM'12 External reviewer for MoDELS'12 PC member for the AMT'12 workshop at MoDELS'12 PC member for ICMT'12 PC member for ECMFA'12 PC member for the PMDE'12 workshop at ECMFA'12 PC member for the CSP track at WETICE'12  2011\n PC member for APSEC'11 PC member for ITSLE'11 External reviewer for MoDELS'11 External reviewer for INDIN'11 PC member for ECMFA'11 PC member for IDM'11 PC member for the \u0026quot;SI \u0026amp; IDM\u0026quot; track at INFORSID'11  2010\n PC member for the FML'10 workshop at ECOOP'10 PC member for the SafeModel'10 workshop External reviewer for MoDELS'10 External reviewer for CBSE'10 Sponsorship chair for AOSD'10  2009\n Organizing Committee member for MtATL'09 External reviewer for Notère'09  2008\n Chair of the workshop SeMo'08 at IDM'08 Local chair for SLE'08  2007\n Chair of the workshop SeMo'07 at IDM'07 PC member for MP'07 workshop Organizing Committee member for LMO'07 Organizing Committee member for IDM'07  Other Services  Founding member and coordinator of the GEMOC Initiative (Eclipse Research Consortium, Eclipse project, Workshop\u0026hellip;) Reviewer for different national research agencies and the European Union. Member of hiring juries for academic positions, and PhD committees  ","date":1461103200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596232800,"objectID":"7462c4816934e23119792d94b6680a9d","permalink":"https://people.irisa.fr/Benoit.Combemale/about/services/","publishdate":"2016-04-20T00:00:00+02:00","relpermalink":"/Benoit.Combemale/about/services/","section":"about","summary":"All services","tags":null,"title":"Services of Prof. Benoit Combemale","type":"about"},{"authors":null,"categories":null,"content":"2019  Smart Modeling: On the Convergence of Scientific and Engineering Models. Invited talk at Lancaster university, UK (14/11/19). Bringing Intelligence to Sociotechnical IoT Systems: Modeling Opportunities and Challenges. Keynote at MDE4IoT’19, DE (15/09/19). Breathe Life Into Your IDE. Talk at LangDev’19, NL (22/03/19).  2018  Model Execution: Past, Present and Future. Keynote at EXE'18, DK (14/10/18). Modeling For Sustainability - Or How to Make Smart CPS Smarter?. Keynote at Models@run.time'18, DK (14/10/18), and invited talk at TU Wien, AT (15/05/18) Execution Framework of the GEMOC Studio. Talk at LangDev'18, NL (08/03/18).  2017  Model Simulation, Graphical Animation, and Omniscient Debugging with Sirius Animator. Invited talk at SiriusCon'17, FR (09/11/17). Modeling For Sustainability - Or How to Make Smart CPS Smarter?. Invited talk at CWI, NL (03/11/17). Sound, yet Flexible, Modeling: A Language Engineering Point Of View. Keynote at FlexMDE'17, US (18/09/17). Towards Language-Oriented Modeling. Invited talk at UQAM, CA (03/05/17). From Model (driven) Engineering, to Language (driven) Engineering. Invited talk at CEA-DAM (12/01/17).  2016  Modeling for Sustainability. Invited talk at Lancaster University (05/12/16). Dynamic Validation \u0026 Verification in Language-Oriented Modeling. Keynote at MoDeVVA 2016 (03/10/16). Towards Language-Oriented Modeling. Invited talk at RWTH Aachen University (11/07/16). Modeling for Smart Cyber-Physical Systems. Talk at CPS days (26/01/16).  2015  A Journey Through MDE, DSL and SLE. Talk at JDEV 2015 (02/07/15). (video in French) Breathe Life into Your Designer! Talk at EclipseCon France 2015 (25/06/15). Modeling for Sustainability. Invited talk at INRA (19/06/15). On the Globalization of Modeling Languages. Invited talk at IRT Saint Exupery (08/06/15). From Model (driven) Engineering, to Language (driven) Engineering. Invited talk at McGill (17/04/15).  2014  From Model (driven) Engineering, to Language (driven) Engineering. Invited talk at University of Namur (16/12/14). The Role of (Software) Languages in the Socio-Technical Coordination. Invited talk at the 2nd Workshop on TowArds the Model DrIveN Organization (AMINO 2014). MDE and SLE: From Theory to Practice. Invited talk at the MDE Day of DevLog (27/10/14).  2013  Modeling, Composition and Simulation of Heterogeneous Models. Invited talk at the MDE Day of DevLog (18/10/13). On the Globalization of Modeling Languages. Invited keynote at Neptune 2013 (22/05/13). On Modeling and Testing When Unpredictability Becomes a Pattern. Keynote keynote at CIEL 2013 (02/04/13). On the Globalization of Modeling Languages. Colorado State University, USA (20/02/13). On Language Composability. Workshops AOM at Bellairs (09/02/13). Model-Driven Engineering for Software Language Engineering. Università degli Studi di Milano, Italy (16/01/13).  2012  Formally Defining and Iterating Infinite Models. 68NQRT Seminar at IRISA/Inria Rennes, France (25/10/12). Model Driven Engineering for Software Language Engineering. Universidade Federal do Paraná, Brazil (12/07/12). Mashup of Meta-Languages: Building Modular and Efficient DSML. Workshops AOM and CAMPaM at Bellairs (30/04/12).  2011  Executable Metamodeling for Model V\u0026V. Kings College London (10/06/11).  2010  Hyper-Agility: A Model-Driven Software Agility from Design-Time to Run-Time. Agile Tour Rennes 2010 (07/10/10). Executable Metamodeling for Model V\u0026V. Colorado State University, USA (25/05/10).  2009  A Formal Metamodeling Approach. Application to Model V\u0026V. LAAS CNRS (Toulouse, 13/02/09), LISI (Poitiers, 26/03/09), and LIP6 (Paris, 05/05/09). A Formal Metamodeling Approach. Application to Model V\u0026V and Autonomous Systems. Inria Rennes ( 21/01/09) and Inria Lille (13/03/09).  2008  Metamodeling Approach for Model Simulation. CEA-List at Saclay (19/09/08). Model Verification and Simulation using Model Transformation. MDE Training at EMN (18/06/08).  2007  Execution Semantics \u0026 MDE, Application to the Process Engineering. INRIA, ATLAS team (03/01/07). A Framework to Formalise the MDE Foundations. IRIT Seminar (06/06/07).  2006  SPEM 1.1 vs. SPEM 2.0. Topcased Seminar (19/06/06). Models Execution: Some Issues.... EJCP, doctoral session (09/06/06).--  ","date":1461103200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596232800,"objectID":"9c0d56c794ea40518b85e859a2116868","permalink":"https://people.irisa.fr/Benoit.Combemale/about/talks/","publishdate":"2016-04-20T00:00:00+02:00","relpermalink":"/Benoit.Combemale/about/talks/","section":"about","summary":"Some invited talks, seminars and keynotes","tags":null,"title":"Talks","type":"about"},{"authors":null,"categories":null,"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451606400,"objectID":"e3cc34b7ada490bd1d696fa5012dd150","permalink":"https://people.irisa.fr/Benoit.Combemale/project/family/","publishdate":"2016-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/family/","section":"project","summary":"2016-2019: Grant from the French _Pôle d'Excellence Cyber_. PI.","tags":["finished"],"title":"DSL Families for Packet Filtering Policy (Family)","type":"project"},{"authors":null,"categories":null,"content":"","date":1414800000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1414800000,"objectID":"de614e529981ce8bdef13ad0c1cb7cdf","permalink":"https://people.irisa.fr/Benoit.Combemale/student/cancio/","publishdate":"2014-11-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/cancio/","section":"student","summary":"","tags":["previousphd"],"title":"Contributions on Approximate Computing Techniques and How to Measure Them","type":"student"},{"authors":null,"categories":null,"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1388534400,"objectID":"d6f9ed98f738822924a9436422748400","permalink":"https://people.irisa.fr/Benoit.Combemale/project/fpml/","publishdate":"2014-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/fpml/","section":"project","summary":"2014-2018: Bilateral collaboration with DGA, the French Defense Procurement Agency. PI.","tags":["finished"],"title":"Domain-Specific Metamodeling for Filtering Policy (FPML)","type":"project"},{"authors":null,"categories":null,"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1388534400,"objectID":"916261daac5c2ac89fba409a58651e8b","permalink":"https://people.irisa.fr/Benoit.Combemale/project/clarity/","publishdate":"2014-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/clarity/","section":"project","summary":"2014-2017: LEOC Project.","tags":["finished"],"title":"éCosytème pour la pLAte-foRme d'Ingénierie sysTème melodY (CLARITY)","type":"project"},{"authors":null,"categories":null,"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1388534400,"objectID":"fd605a9d67c5ecc322bebe8e505f6a4c","permalink":"https://people.irisa.fr/Benoit.Combemale/project/mpm4cps/","publishdate":"2014-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/mpm4cps/","section":"project","summary":"2014-2018: ICT COST Action IC1404. Member of the Management Committee.","tags":["finished"],"title":"Multi-Paradigm Modelling for Cyber-Physical Systems (MPM4CPS)","type":"project"},{"authors":null,"categories":null,"content":"","date":1383264000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1383264000,"objectID":"a6b7fc14fbbf163ddadd304d6ebc943f","permalink":"https://people.irisa.fr/Benoit.Combemale/student/degueule/","publishdate":"2013-11-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/degueule/","section":"student","summary":"","tags":["previousphd"],"title":"Composition and Interoperability for External Domain-Specific Language Engineering","type":"student"},{"authors":null,"categories":null,"content":"","date":1383264000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1383264000,"objectID":"ed664ca4c505d6552e41d7e00c0fcb58","permalink":"https://people.irisa.fr/Benoit.Combemale/student/mendez/","publishdate":"2013-11-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/mendez/","section":"student","summary":"","tags":["previousphd"],"title":"Leveraging Software Product Lines Engineering in the Construction of Domain Specific Languages","type":"student"},{"authors":null,"categories":null,"content":"","date":1356998400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1356998400,"objectID":"24679674de7c447b08aac3d8adfdbc15","permalink":"https://people.irisa.fr/Benoit.Combemale/project/diversify/","publishdate":"2013-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/diversify/","section":"project","summary":"2013-2016: FP7 FET ([Benoit Baudry](http://people.irisa.fr/Benoit.Baudry/) coordinates the whole project).","tags":["finished"],"title":"DIVERSIFY","type":"project"},{"authors":null,"categories":null,"content":"","date":1356998400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1356998400,"objectID":"f574c3a8efb4d8d286ca262a02d49920","permalink":"https://people.irisa.fr/Benoit.Combemale/project/mbsar/","publishdate":"2013-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/mbsar/","section":"project","summary":"2013-2015: CNRS Project, Program PICS. PI.","tags":["finished"],"title":"Model-Based Security Analysis at Runtime (MBSAR)","type":"project"},{"authors":null,"categories":null,"content":"","date":1349049600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1349049600,"objectID":"f7ef3157d63678c8defc1ce0fb4d0447","permalink":"https://people.irisa.fr/Benoit.Combemale/student/bousse/","publishdate":"2012-10-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/bousse/","section":"student","summary":"","tags":["previousphd"],"title":"Execution Trace Management to Support Dynamic V\u0026amp;V for Executable DSMLs","type":"student"},{"authors":null,"categories":null,"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1325376000,"objectID":"5b8b5d97f751c34161464ca0a0658c6e","permalink":"https://people.irisa.fr/Benoit.Combemale/project/anrgemoc/","publishdate":"2012-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/anrgemoc/","section":"project","summary":"2012-2016: ANR Project, Program INS, Grant n°ANR-12-INSE-0011. PI.","tags":["finished"],"title":"Generic Environment for Models of Computation (ANR GEMOC)","type":"project"},{"authors":null,"categories":null,"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1325376000,"objectID":"e48d83acc215c0593ad632f404680e63","permalink":"https://people.irisa.fr/Benoit.Combemale/student/bousse-msc/","publishdate":"2012-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/bousse-msc/","section":"student","summary":"","tags":["pastmsc"],"title":"Requirements management led by formal verification","type":"student"},{"authors":null,"categories":null,"content":"","date":1293840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1293840000,"objectID":"bae0a8fe82d7d0d1e470dbf305ccbddf","permalink":"https://people.irisa.fr/Benoit.Combemale/student/marchand/","publishdate":"2011-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/marchand/","section":"student","summary":"","tags":["pastmsc"],"title":"Formal and tool-supported operator for multi-formalism modelling","type":"student"},{"authors":null,"categories":null,"content":"","date":1293840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1293840000,"objectID":"f7fe045f94ce9ee258bcfc9b70ee9643","permalink":"https://people.irisa.fr/Benoit.Combemale/project/asgemoc/","publishdate":"2011-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/asgemoc/","section":"project","summary":"2011: Action Spécifique 2011 du GDR GPL du CNRS. PI.","tags":["finished"],"title":"Ingénierie du logiciel pour les systèmes hétérogènes : bilan, verrous et défis (AS GEMOC)","type":"project"},{"authors":null,"categories":null,"content":"","date":1293840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1293840000,"objectID":"99dd0cf2c744335167981ac2106d0ca9","permalink":"https://people.irisa.fr/Benoit.Combemale/project/relate/","publishdate":"2011-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/relate/","section":"project","summary":"2011-2014: EU FP7 Marie Curie ITN (Initial Training Network).","tags":["finished"],"title":"RELATE","type":"project"},{"authors":null,"categories":null,"content":"","date":1293840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1293840000,"objectID":"bf30d2d4f3628185ae400b516a5bc53d","permalink":"https://people.irisa.fr/Benoit.Combemale/project/varymde/","publishdate":"2011-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/varymde/","section":"project","summary":"2011-2015: Bilateral collaboration with Thales Research \u0026amp; Technology. Co-PI.","tags":["finished"],"title":"Variability in Model Driven Engineering (VaryMDE)","type":"project"},{"authors":null,"categories":null,"content":"","date":1288569600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1288569600,"objectID":"ffd8218d884fbced98db4b20f1f9fbdd","permalink":"https://people.irisa.fr/Benoit.Combemale/student/rouille/","publishdate":"2010-11-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/rouille/","section":"student","summary":"","tags":["previousphd"],"title":"Variability management and automation of software development processes","type":"student"},{"authors":null,"categories":null,"content":"","date":1285891200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1285891200,"objectID":"7ead41390dd6d89481cd3401c14aae74","permalink":"https://people.irisa.fr/Benoit.Combemale/student/guy/","publishdate":"2010-10-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/guy/","section":"student","summary":"","tags":["previousphd"],"title":"Typing facilities for language engineering","type":"student"},{"authors":null,"categories":null,"content":"","date":1262304000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1262304000,"objectID":"81962b23a401b3c60125f9c0436a2a27","permalink":"https://people.irisa.fr/Benoit.Combemale/project/cifresodifrance/","publishdate":"2010-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/cifresodifrance/","section":"project","summary":"2010-2013: Bilateral collaboration (CIFRE) with the Sodifrance company. PI.","tags":["finished"],"title":"CIFRE Sodifrance","type":"project"},{"authors":null,"categories":null,"content":"","date":1262304000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1262304000,"objectID":"ba836d4679ec885fa807a469bb045617","permalink":"https://people.irisa.fr/Benoit.Combemale/student/fonseca/","publishdate":"2010-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/fonseca/","section":"student","summary":"","tags":["pastmsc"],"title":"Coping with Modular Modelling in fUML","type":"student"},{"authors":null,"categories":null,"content":"","date":1262304000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1262304000,"objectID":"12c8f5f88039cd970bc53351790e1677","permalink":"https://people.irisa.fr/Benoit.Combemale/project/als/","publishdate":"2010-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/als/","section":"project","summary":"2010: Scientific Project from University of Rennes 1. Co-PI.","tags":["finished"],"title":"User-Centric Safe Adaption of Assisted Living Systems","type":"project"},{"authors":null,"categories":null,"content":"","date":1230768000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1230768000,"objectID":"1915752f738e95f724b515c3d9cff819","permalink":"https://people.irisa.fr/Benoit.Combemale/project/opees/","publishdate":"2009-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/opees/","section":"project","summary":"2009-2012: ITEA2 Project.","tags":["finished"],"title":"Open Platform for the Engineering of Embedded Systems (OPEES)","type":"project"},{"authors":null,"categories":null,"content":"","date":1199145600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1199145600,"objectID":"23fe78aaf380cf21c83fd92ad9f290ab","permalink":"https://people.irisa.fr/Benoit.Combemale/student/bender/","publishdate":"2008-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/student/bender/","section":"student","summary":"","tags":["pastmsc"],"title":"PLC programs modeling and formal verification using MDE and Ladder Diagrams","type":"student"},{"authors":null,"categories":null,"content":"","date":1104537600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1104537600,"objectID":"203c934ebd8d6912cf048b2ed140a9b9","permalink":"https://people.irisa.fr/Benoit.Combemale/project/topcased/","publishdate":"2005-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/project/topcased/","section":"project","summary":"2005-2009: FUI project and bilateral contracts (Airbus).","tags":["finished"],"title":"Toolkit in OPen source for Critical Applications \u0026amp; SystEms Development (TOPCASED)","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c4cd865fb34a4c2827308927bc1c834a","permalink":"https://people.irisa.fr/Benoit.Combemale/about/bio/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/about/bio/","section":"about","summary":"","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":null,"content":"Software Development Industrialization Introduction à la gestion de versions, la gestion de dépendances et l\u0026rsquo;intégration continue\nObjectifs du TP  Comprendre le fonctionnement de maven, configurer un projet de développement, utiliser les artifacts, et générer des rapports Utiliser Git pour sauvegarder et collaborer sur le code source de votre projet Utiliser un système d’intégration continue  Partie 1 : Utilisation de Maven Liens utiles  Site de Maven : http://maven.apache.org/ FAQ MAVEN developpez.com : http://java.developpez.com/faq/maven/  Environnement Selon le 3ième lien donnée ci-dessus, Maven est essentiellement un outil de gestion et de compréhension de projet. Maven offre des fonctionnalités de : construction, compilation ; documentation ; rapport ; gestion des dépendances ; gestion des sources ; mise à jour de projet ; déploiement.\nUtiliser Maven consiste à définir dans chaque projet à gérer un script Maven appelés POM : pom.xml. Nous allons voir dans ce TP qu\u0026rsquo;un POM permet de définir des dépendances, des configurations pour notamment construire, tester, mettre en paquet des artefacts logiciels (exécutables, tests, documentations, archives, etc.). Pour cela, Maven récupère sur des dépôts maven les outils dont il a besoin pour exécuter le POM. Utiliser Maven requière donc : une (bonne) connexion à Internet car il télécharge beaucoup de choses ; de l\u0026rsquo;espace disque pour la même raison. Les artefacts qu\u0026rsquo;il télécharge sont originellement stockés dans le dossier .m2 dans votre home-dir. Ce dossier contient également le fichier de configuration Maven : settings.xml.\nPour configurer Maven de manière à changer l\u0026rsquo;endroit où les artefacts téléchargés seront stockés (e.g., afin d\u0026rsquo;éviter des problèmes d\u0026rsquo;espace disque), vous pouvez modifier le fichier settings.xml de la manière suivante :\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;settings\u0026gt; \u0026lt;localRepository\u0026gt;/tmp/mavenrepository\u0026lt;/localRepository\u0026gt; \u0026lt;offline\u0026gt;false\u0026lt;/offline\u0026gt; \u0026lt;/settings\u0026gt;  Création d\u0026rsquo;un projet Maven Création d’une application basique : pour initialiser un projet Java, vous pouvez utiliser l’archetype maven maven-archetype-quickstart. Vous avez juste à fournir un groupId et un artefactId.\nDans Eclipse:\nnew -\u0026gt; other -\u0026gt; maven -\u0026gt; maven project. Vous devrez sélectionner l’archetype, l’artifactId et le groupId  En ligne de commande (non nécessaire si vous l’avez fait depuis Eclipse):\nmvn archetype:create \\ -DgroupId=[your project's group id] \\ -DartifactId=[your project's artifact id] \\ -DarchetypeArtifactId=maven-archetype-quickstart  Ou simplement :\nmvn archetype:create \\ -DgroupId=[your project's group id] \\ -DartifactId=[your project's artifact id]  Vous obtenez la structure de projet jointe\n|-- src | |-- main | | `-- java | | `-- [your project's package] | | `-- App.java | `-- test | `-- java | `-- [your project's package] | `-- AppTest.java `-- pom.xml  Par exemple si vous exécutez la commande\nmvn archetype:generate \\ -DgroupId=fr.esir.mdi.ci \\ -DartifactId=tpmaven  Vous obtiendrez l’architecture suivante :\n|-- src | |-- main | | `-- java | | `-- fr | | `-- esir | | `-- mdi | | `-- ci | |\t`-- App.java | `-- test | `-- java | `-- fr | `-- esir | `-- mdi |\t`--ci | `-- AppTest.java `-- pom.xml  Le fichier pom.xml est le fichier de configuration maven du projet. Il décrit les caractéristiques du projet (son nom, sa famille, sa version, etc.), ainsi que les processus (les « builds ») à exécuter (la compilation, l\u0026rsquo;exécution des tests, la création d\u0026rsquo;archive, etc.).\nIl existe différentes tâches Maven de base, i.e. fournies par Maven. Les principales sont :\n mvn clean : supprimer le dossier target. Le dossier target d\u0026rsquo;un projet maven contient toutes les données produites par maven (classes compilées, jar produits, rapports, etc.) ; mvn compile: lance la compilation du code source du projet Maven (mais pas la compilation des tests) ; mvn test: mvn compile + lance la compilation et l\u0026rsquo;exécution des tests ; mvn package: mvn test + lance les opérations de packaging (exemple : la création de fichiers jar) ; mvn install: mvn package + installe les jar produits dans le dossier .m2 de l\u0026rsquo;utilisateur pour une utilisation dans les autres projets en local.  Chaque plug-in configuré et utilisé dans un pom peuvent fournir des tâches spécifiques.\nConfiguration d\u0026rsquo;un projet Maven dans Eclipse Depuis Eclipse 4.X, le support de maven s’est amélioré. Pour importer votre projet (ne pas faire si vous avez créé votre projet maven depuis eclipse, ce sera par contre à faire après avoir récupéré un projet depuis un serveur git) :\nFile -\u0026gt; import -\u0026gt; maven -\u0026gt; existing maven project.  Votre projet est configuré.\nPartie 2 : Gestion des dépendances Intégrer à votre projet le fichier ici.\nVous verrez que le code ne compile pas car il manque une dépendances. Intégrez maintenant la dépendance à itext.\n\u0026lt;!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.itextpdf\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;itextpdf\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.5.13.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;  Votre IDE va downloader la dépendance et la mettre automatiquement dans votre classpath. Dans ce sens, cela permet de ne mettre dans votre gestionnaire de source que le code source et le descripteur de projet (pom.xml).\nPartie 3 : Spécialisation du processus de build Imaginons que vous souhaitiez ajouter une tâche dans le processus de build. Par exemple, compilez votre code source avec la version Java 1.8. Ajoutez la section suivant à votre fichier pom.xml\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;!-- or whatever version you use --\u0026gt; \u0026lt;source\u0026gt;1.8\u0026lt;/source\u0026gt; \u0026lt;target\u0026gt;1.8\u0026lt;/target\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt;  Vous pouvez ajouter de nombreux plugin dans cette section. Prenez le temps d\u0026rsquo;aller regarder ici.\nPartie 4 : Génération de rapports Générer la Javadoc Ajoutez des commentaires à votre code, puis ajoutez le code suivant dans la section build du pom.xml de votre projet.\n\u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-site-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.9.1\u0026lt;/version\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-project-info-reports-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.1\u0026lt;/version\u0026gt; \u0026lt;/plugin\u0026gt;  Puis dans la section reporting:\n\u0026lt;reporting\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-javadoc-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.0\u0026lt;/version\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/reporting\u0026gt;  Puis lancez en ligne de commande (au même niveau que le fichier pom.xml) : mvn site. Cette tâche crée un site Web pour votre projet. Par défaut, les goals maven générant des fichiers travaillent dans le dossier target se trouvant au même niveau que le fichier pom.xml. Allez dans le dossier target/site et ouvrez le fichier index.html. Vous pouvez regarder la Javadoc générée en cliquant sur Project reports.\nEclipse permet de lancer cette commande maven sans passer par la ligne de commande (voir menu run d\u0026rsquo;Eclipse).\nValider la qualité du code avec le plugin checkstyle Ajoutez à la section \u0026lt;plugins\u0026gt; dans \u0026lt;reporting\u0026gt; le plugin checkstyle :\n\u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-checkstyle-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.1\u0026lt;/version\u0026gt; \u0026lt;/plugin\u0026gt;  Lancez mvn clean site (le goal clean vide le dossier target). Sur la page Web générée par « mvn site », une nouvelle section Checkstyle a été ajouté dans Project reports.\nQuelle est la norme de codage à laquelle se réfère le rapport par défaut ? Comment imposer la norme de codage de Google? Le fichier de configuration de google est inclus dans checkstyle vous devez juste indiquer dans la configuration que vous souhaitez l’utiliser (cf. https://maven.apache.org/plugins/maven-checkstyle-plugin/examples/custom-checker-config.html). Modifiez votre classe du projet tp1 de façon à diminuer le nnombre d\u0026rsquo;erreurs.\n Site de l\u0026rsquo;outil CheckStyle : http://checkstyle.sourceforge.net/ Site du plugin Maven : http://maven.apache.org/plugins/maven-checkstyle-plugin/  Rapport croisé de source \u0026lt;reporting\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt;\t\u0026lt;artifactId\u0026gt;maven-jxr-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.0.0\u0026lt;/version\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/reporting\u0026gt;  Lien utile : http://maven.apache.org/plugins/maven-jxr-plugin/ Quelle est la valeur ajoutée de ce plugin ? En particulier, montrez sa complémentarité avec CheckStyle. Désormais vous pouvez passer du rapport CheckStyle au code source en cliquant sur le numéro de ligne associé au commentaire CheckStyle.\nCouverture des tests A quel point les développeurs ont réalisé des tests unitaires ? Quelles parties de l\u0026rsquo;application n\u0026rsquo;ont pas été testées ?\n\u0026lt;reporting\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.codehaus.mojo\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cobertura-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/reporting\u0026gt;  Lien utile : http://www.mojohaus.org/cobertura-maven-plugin/usage.html\nIdentifier des patterns d\u0026rsquo;erreur avec PMD Ajoutez volontairement du code mort à votre code (e.g., une méthode non utilisée) et identifiez le code mort (e.g., variables ou paramètres non utilisés) et la duplication de code (e.g., code copié/collé = possible bug copié/collé, code \u0026lsquo;compliqué\u0026rsquo;, e.g., trop de if\u0026hellip;else \u0026hellip;).\nAjoutez à la section \u0026lt;reporting\u0026gt; le plugin PMD :\n\u0026lt;project\u0026gt; \u0026lt;reporting\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-pmd-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.14.0\u0026lt;/version\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/reporting\u0026gt; \u0026lt;/project\u0026gt;  Quels sont les deux nouveaux rapports générés ? Qu\u0026rsquo;est ce que le rapport \u0026lsquo;CPD Report\u0026rsquo; ? Qu\u0026rsquo;est ce que le rapport \u0026lsquo;PMD Report\u0026rsquo; ?\nConnaître l\u0026rsquo;activité du projet Combien et quels fichiers ont été modifiés par un développeur ? Commiter votre projet sur github ou sur le gitlab de l’istic.\nAjoutez à la section \u0026lt;reporting\u0026gt; le plugin changelog :\n\u0026lt;project\u0026gt; \u0026lt;reporting\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-changelog-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/reporting\u0026gt; \u0026lt;scm\u0026gt; \u0026lt;connection\u0026gt;scm:svn:svn://IPSERVEUR/repository1/monappli-web\u0026lt;/connection\u0026gt; \u0026lt;url\u0026gt;http://IPSERVEUR/svn/monappli-web\u0026lt;/url\u0026gt; \u0026lt;/scm\u0026gt; \u0026lt;/project\u0026gt;  ipserveur doit être remplacé par l’IP de votre repo svn ou git.\nLancez mvn site. Que s\u0026rsquo;est t\u0026rsquo;il passé ?\nLe répertoire /target/site situé dans votre projet contient maintenant trois rapports d\u0026rsquo;activité :\n changelog : rapport indiquant toutes les activités sur le SCM. dev-activity : rapport indiquant par développeur le nombre de commits, de fichiers modifiés. file-activity : rapport indiquant les fichiers qui ont été révisés.  Partie 5 : Utilisation de Git Pour cette partie, vous pouvez utiliser à votre convenance soit la forge Gitlab fournie par la plate-forme ISTIC ESIR, soit GitHub. Mettez votre code sur github (ou gitlab):\n  créez un nouveau repository via l\u0026rsquo;interface github/gitlab\n  liez le dépôt local au distant :\ngit remote add origin https://github.com/login/nomRepo.git\n  mettez votre code sur ce dépôt :\ngit push origin master (en cas de non-fast-forward : git pull origin master)\n  Initiez vous aux principales commandes Git :\n créez deux branches, passez de l\u0026rsquo;une a l\u0026rsquo;autre dans votre repo local (git checkout), et faite des modifications (dont certaines en conflit entre les deux branches) dans chacune d\u0026rsquo;entre elles (e.g., rajoutez des commentaires, des tests, etc.) mergez successivement les deux branches avec la branche master. Le merge de la deuxème branche devrait soulever des conflits que vous devez résoudre manuellement. Résolvez le conflit en éditant le fichier en conflit et en enlevant manuellement les \u0026laquo;\u0026laquo;\u0026raquo;\u0026raquo; etc. Ces lignes représentent les lignes en conflits entre vos 2 versions (des deux branches). poussez ces modifications sur le repository.  Si vous êtes sur Github, vous pouvez aussi vous initier à la création de pull request, à l\u0026rsquo;utilisation de bots, etc.\nVous pouvez annuler tous les commits précédents (git revert \u0026hellip;) avant de poursuivre le TP.\nVous allez dans la suite étudier les outils d\u0026rsquo;intégration continue Sonar et Jenkins/GitLab CI. La différence entre ces deux outils est simple : Sonar est un outil d\u0026rsquo;assurance qualité tandis que Jenkins est un outil de « release engineering ». Les deux sont complémentaires.\nPartie 6 : Intégration avec l\u0026rsquo;outil Sonar Téléchargez Sonar, de-compressez-le dans /tmp, puis lancez Sonar :\nsh ./bin/linux-x86-64/sonar.sh start  Au niveau du pom de votre projet, lancez la commande mvn sonar:sonar puis allez à l\u0026rsquo;adresse http://localhost:9000/. Loguez-vous avec le login admin et le mot-de-passe admin. Allez dans Quality Profiles et changer les règles de qualités utilisées puis relancer mvn sonar:sonar. Baladez-vous dans Sonar pour explorer ces différentes fonctionnalités.\nVous pourrez ensuite arrêter sonar avec\nsh ./bin/linux-x86-64/sonar.sh stop  Partie 7 : Intégration avec Jenkins Sur http://jenkins-ci.org/, prenez la version LTS Java Web Archive (.war) pour la mettre dans /tmp. Il faut déplacer l\u0026rsquo;endroit où la configuration Jenkins sera stockée :\nexport JENKINS_HOME=/tmp/.jenkins  Démarrez jenkins :\njava -jar jenkins.war --httpPort=9900  Allez dans votre navigateur : http://localhost:9900/.\nConfigurez Jenkins :\n Commencez par cliquer sur « enable auto refresh » Allez dans le menu « Jenkins → Manage Jenkins → Global Tool Configuration » Cliquez sur « Add JDK ». Saisissez un nom quelconque permettant d\u0026rsquo;identifier la JDK. Cochez « I agree\u0026hellip; ». Ignorez le message d\u0026rsquo;erreur « requires Oracle account » Cliquez sur « Add Maven ». Saisissez un nom quelconque permettant d\u0026rsquo;identifier cette version de Maven. Cliquez sur « Save ». Le but de ces configurations est de pouvoir installer, si on le souhaite, plusieurs Maven ou plusieurs JDK (par exemple, certains projets peuvent nécessiter Java 6 et d\u0026rsquo;autres Java 8). Installez le module git pour Jenkins : « Jenkins → Manage Plugins → Available → « GIT plugin » et « Maven integration plugin » → Download now and install after restart → Restart Jenkins ». Ces plugins peuvent être déjà installés.  Par défaut, jenkins ne contient pas le plugin pour gérer des repository Git, Il vous faut installer le plugin “Git Plugin”. De plus, vous devez configurer Maven (voir Configure System).\nEnsuite créez un « job » en cliquant sur « create new job -\u0026gt; Maven Project ». Donnez un nom à votre projet. Définissez les sources en indiquant l\u0026rsquo;url du repository git que vous avez préalablement créer sur github (i.e. https://github.com/login/nomRepo.git) et enfin définissez les goals maven pour le build (« Add build step » → « Invoke top-level Maven\u0026hellip; ») : pour commencer clean package. Si le pom n’est pas à la racine de votre projet, cliquez sur « Advanced\u0026hellip; » → remplissez le champ POM. Lancer un build.\nDans l\u0026rsquo;historique des builds, une icône bleu doit apparaître à la fin de la construction pour désigner la construction correcte de l\u0026rsquo;artefact (bleu car le développeur de Jenkins est Japonais et au Japon le bleu équivaut au vert chez nous, d\u0026rsquo;ailleurs un plugin Jenkins existe pour afficher des icônes vertes et non bleues\u0026hellip;). Cliquez ensuite sur le lien sous « Module builds », les artefacts créés par jenkins en utilisant le POM du projet sont visibles dont un jar. Ouvrez ce dernier, vous verrez que le manifest est vide. Dans les étapes suivantes vous allez compléter le POM pour obtenir un vrai jar exécutable.\nPackager des artefacts logiciels avec maven Comme expliqué précédemment, ces artefacts logiciels peuvent être produits soit en utilisant directement maven en ligne de commande, soit en utilisant Jenkins. Nous allons dans cette dernière partie étudier différents plugins maven permet de réaliser de nombreuses actions de liées à la construction d\u0026rsquo;artefacts logiciels.\nCréation d\u0026rsquo;un jar exécutable via maven Pour construire des artefacts vous allez ajouter un bloc \u0026lt;build\u0026gt; dans le bloc \u0026lt;project\u0026gt; de votre POM. Générez un jar exécutable grâce au plugin maven-jar-plugin qui vous permettra de définir un manifest : http://maven.apache.org/plugins/maven-jar-plugin/ (regardez les exemples « creating an executable JAR file »).\nLancez mvn clean install et exécutez le nouveau jar généré se trouvant dans le dossier target. Commitez et pushez vos changements, relancez le build Jenkins, allez dans le « last build » et cliquez sur le « Module Builds » listé : la liste des éléments produits doit être visible et téléchargeable.\nExécution de test via maven Utilisez le plugin maven-surefire-plugin pour exécuter les tests du projet lors de la commande mvn clean install, cf.: http://maven.apache.org/surefire/maven-surefire-plugin/ Commitez le POM sur github (avec quelques tests) et relancez un build sur Jenkins afin d\u0026rsquo;observer les évolutions apportées.\nCréation d\u0026rsquo;archives des sources et des exécutables Le plugin maven-assembly-plugin permet de créer des archives. Ce plugin est notamment très utile pour créer des archives des sources ou des fichiers exécutables, cf : http://maven.apache.org/plugins/maven-assembly-plugin/ (voir aussi: https://medium.com/@kasunpdh/using-the-maven-assembly-plugin-to-build-a-zip-distribution-5cbca2a3b052)\nÉtudiez et adaptez l\u0026rsquo;utilisation de ce plugin dans le projet suivant : https://github.com/latexdraw/latexdraw/blob/master/pom.xml pour l\u0026rsquo;utiliser dans votre projet afin de créer un zip des sources et un autre contenant le jar exécutable.\nCommitez les modifications sur github et relancez un build sur Jenkins afin d\u0026rsquo;observer les évolutions apportées.\nUtilisation de sonar, cobertura et pmd  https://wiki.jenkins-ci.org/display/JENKINS/Sonar+plugin https://wiki.jenkins-ci.org/display/JENKINS/Cobertura+Plugin https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin  Attention pour Cobertura, vous avez besoin de définir le format de sortie en xml. Pour cela, il existe deux solutions:\n la première consiste à ajouter une option dans la définition du build maven: “-Dcobertura.report.format=xml” la deuxième consiste à modifier la configuration dans votre pom et d’ajouter l’option de configuration appropriée (voir sur la page de Cobertura plugin)  Daily/Nightly build avec Jenkins Configurer vos builds Jenkins pour qu\u0026rsquo;ils se construisent automatiquement à 1h du matin tous les jours.\nPartie 7 : Intégration avec GitLab CI Pour cette partie, votre projet devra être sur GitLab.\nQuelques définitions préliminaires des concepts de GitLab CI :\n  pipeline : un ensemble de jobs (quoi faire?), chacun a réaliser lors d\u0026rsquo;un stage (quand le faire?).  runner : GitLab utilise des runners sur différents serveurs pour exécuter les jobs dans un pipeline. GitLab fournit des runners à utiliser, mais vous pouvez aussi utiliser vos propres serveurs comme runners.  jobs : tâche à exécuter dans un pipeline.  stage : un groupe de jobs connexes à exécuter dans un pipeline.  Installation de votre runner Installer un runner docker sur votre pc en suivant les instructions : https://docs.gitlab.com/runner/install/docker.html\nSi vous ne possédez pas docker, veuillez suivre les instructions d’installation de Docker pour votre système d’exploitation https://docs.docker.com/get-docker/. Installer ensuite le gitlab Runner , puis faire la partie register runner https://docs.gitlab.com/runner/register/index.html#docker . Vous aurez besoin des informations présent sur votre projet dans gitlab : Settings / CI/CD / Specific Runners, Setup a specific Runner manually.\n Pour le URL copiez coller ce que vous trouverez à l’adresse précédente Pour le token copiez coller ce que vous trouverez à l’adresse précédente Pour le executor : docker Pour la description : ce que vous voulez Pour le défaut docker image entrer python:3.9.0 Pour le reste vous pouvez mettre ce que vous voulez.  Une fois cette opération terminé vous devriez voir dans votre projet votre runner apparaître : Settings / CI/CD / Runners\nLancer votre Runner à l’aide de la commande sudo docker run -d \u0026ndash;name gitlab-runner \u0026ndash;restart always\n-v /srv/gitlab-runner/config:/etc/gitlab-runner\n-v /var/run/docker.sock:/var/run/docker.sock\ngitlab/gitlab-runner:latest 3.bis/ Retourner dans Settings / CI/CD / Specific Runners, Setup a specific Runner manually et configurer votre Runner pour accepter les jobs non tagger : Cliquer sur le crayon pour éditer votre runner, puis cochez la case Run untagged jobs. Voila, votre runner est maintenant prêt!\nConfiguration de votre pipeline GitLab utilise le fichier \u0026ldquo;.gitlab-ci.yml\u0026rdquo; pour faire fonctionner le pipeline de l\u0026rsquo;Intégration Continue pour chaque projet. Le fichier \u0026ldquo;.gitlab-ci.yml\u0026rdquo; doit se trouver dans le répertoire racine de votre projet.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c7000cd0c44dbf9f9b75df6b27f4a19d","permalink":"https://people.irisa.fr/Benoit.Combemale/course/esir/mdi-labs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/Benoit.Combemale/course/esir/mdi-labs/","section":"course","summary":"Software Development Industrialization Introduction à la gestion de versions, la gestion de dépendances et l\u0026rsquo;intégration continue\nObjectifs du TP  Comprendre le fonctionnement de maven, configurer un projet de développement, utiliser les artifacts, et générer des rapports Utiliser Git pour sauvegarder et collaborer sur le code source de votre projet Utiliser un système d’intégration continue  Partie 1 : Utilisation de Maven Liens utiles  Site de Maven : http://maven.","tags":null,"title":"","type":"course"}]